// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distributionxv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Reward by index.
	Reward(ctx context.Context, in *QueryGetRewardRequest, opts ...grpc.CallOption) (*QueryGetRewardResponse, error)
	// Queries a list of Reward items.
	RewardAll(ctx context.Context, in *QueryAllRewardRequest, opts ...grpc.CallOption) (*QueryAllRewardResponse, error)
	// Queries a BuilderCount by index.
	BuilderCount(ctx context.Context, in *QueryGetBuilderCountRequest, opts ...grpc.CallOption) (*QueryGetBuilderCountResponse, error)
	// Queries a list of BuilderCount items.
	BuilderCountAll(ctx context.Context, in *QueryAllBuilderCountRequest, opts ...grpc.CallOption) (*QueryAllBuilderCountResponse, error)
	// Queries a BuilderList by id.
	BuilderList(ctx context.Context, in *QueryGetBuilderListRequest, opts ...grpc.CallOption) (*QueryGetBuilderListResponse, error)
	// Queries a list of BuilderList items.
	BuilderListAll(ctx context.Context, in *QueryAllBuilderListRequest, opts ...grpc.CallOption) (*QueryAllBuilderListResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reward(ctx context.Context, in *QueryGetRewardRequest, opts ...grpc.CallOption) (*QueryGetRewardResponse, error) {
	out := new(QueryGetRewardResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/Reward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardAll(ctx context.Context, in *QueryAllRewardRequest, opts ...grpc.CallOption) (*QueryAllRewardResponse, error) {
	out := new(QueryAllRewardResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/RewardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderCount(ctx context.Context, in *QueryGetBuilderCountRequest, opts ...grpc.CallOption) (*QueryGetBuilderCountResponse, error) {
	out := new(QueryGetBuilderCountResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderCountAll(ctx context.Context, in *QueryAllBuilderCountRequest, opts ...grpc.CallOption) (*QueryAllBuilderCountResponse, error) {
	out := new(QueryAllBuilderCountResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderList(ctx context.Context, in *QueryGetBuilderListRequest, opts ...grpc.CallOption) (*QueryGetBuilderListResponse, error) {
	out := new(QueryGetBuilderListResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderListAll(ctx context.Context, in *QueryAllBuilderListRequest, opts ...grpc.CallOption) (*QueryAllBuilderListResponse, error) {
	out := new(QueryAllBuilderListResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Reward by index.
	Reward(context.Context, *QueryGetRewardRequest) (*QueryGetRewardResponse, error)
	// Queries a list of Reward items.
	RewardAll(context.Context, *QueryAllRewardRequest) (*QueryAllRewardResponse, error)
	// Queries a BuilderCount by index.
	BuilderCount(context.Context, *QueryGetBuilderCountRequest) (*QueryGetBuilderCountResponse, error)
	// Queries a list of BuilderCount items.
	BuilderCountAll(context.Context, *QueryAllBuilderCountRequest) (*QueryAllBuilderCountResponse, error)
	// Queries a BuilderList by id.
	BuilderList(context.Context, *QueryGetBuilderListRequest) (*QueryGetBuilderListResponse, error)
	// Queries a list of BuilderList items.
	BuilderListAll(context.Context, *QueryAllBuilderListRequest) (*QueryAllBuilderListResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Reward(context.Context, *QueryGetRewardRequest) (*QueryGetRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (UnimplementedQueryServer) RewardAll(context.Context, *QueryAllRewardRequest) (*QueryAllRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardAll not implemented")
}
func (UnimplementedQueryServer) BuilderCount(context.Context, *QueryGetBuilderCountRequest) (*QueryGetBuilderCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderCount not implemented")
}
func (UnimplementedQueryServer) BuilderCountAll(context.Context, *QueryAllBuilderCountRequest) (*QueryAllBuilderCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderCountAll not implemented")
}
func (UnimplementedQueryServer) BuilderList(context.Context, *QueryGetBuilderListRequest) (*QueryGetBuilderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderList not implemented")
}
func (UnimplementedQueryServer) BuilderListAll(context.Context, *QueryAllBuilderListRequest) (*QueryAllBuilderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderListAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/Reward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reward(ctx, req.(*QueryGetRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/RewardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardAll(ctx, req.(*QueryAllRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuilderCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderCount(ctx, req.(*QueryGetBuilderCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuilderCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderCountAll(ctx, req.(*QueryAllBuilderCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuilderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderList(ctx, req.(*QueryGetBuilderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuilderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderListAll(ctx, req.(*QueryAllBuilderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.distributionx.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _Query_Reward_Handler,
		},
		{
			MethodName: "RewardAll",
			Handler:    _Query_RewardAll_Handler,
		},
		{
			MethodName: "BuilderCount",
			Handler:    _Query_BuilderCount_Handler,
		},
		{
			MethodName: "BuilderCountAll",
			Handler:    _Query_BuilderCountAll_Handler,
		},
		{
			MethodName: "BuilderList",
			Handler:    _Query_BuilderList_Handler,
		},
		{
			MethodName: "BuilderListAll",
			Handler:    _Query_BuilderListAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/distributionx/v1/query.proto",
}
