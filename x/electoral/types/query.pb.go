// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: electoral/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetAccStateRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryGetAccStateRequest) Reset()         { *m = QueryGetAccStateRequest{} }
func (m *QueryGetAccStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccStateRequest) ProtoMessage()    {}
func (*QueryGetAccStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{0}
}
func (m *QueryGetAccStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccStateRequest.Merge(m, src)
}
func (m *QueryGetAccStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccStateRequest proto.InternalMessageInfo

func (m *QueryGetAccStateRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryGetAccStateResponse struct {
	AccState AccState `protobuf:"bytes,1,opt,name=accState,proto3" json:"accState"`
}

func (m *QueryGetAccStateResponse) Reset()         { *m = QueryGetAccStateResponse{} }
func (m *QueryGetAccStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccStateResponse) ProtoMessage()    {}
func (*QueryGetAccStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{1}
}
func (m *QueryGetAccStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccStateResponse.Merge(m, src)
}
func (m *QueryGetAccStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccStateResponse proto.InternalMessageInfo

func (m *QueryGetAccStateResponse) GetAccState() AccState {
	if m != nil {
		return m.AccState
	}
	return AccState{}
}

type QueryAllAccStateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccStateRequest) Reset()         { *m = QueryAllAccStateRequest{} }
func (m *QueryAllAccStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccStateRequest) ProtoMessage()    {}
func (*QueryAllAccStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{2}
}
func (m *QueryAllAccStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccStateRequest.Merge(m, src)
}
func (m *QueryAllAccStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccStateRequest proto.InternalMessageInfo

func (m *QueryAllAccStateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccStateResponse struct {
	AccState   []AccState          `protobuf:"bytes,1,rep,name=accState,proto3" json:"accState"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccStateResponse) Reset()         { *m = QueryAllAccStateResponse{} }
func (m *QueryAllAccStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccStateResponse) ProtoMessage()    {}
func (*QueryAllAccStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{3}
}
func (m *QueryAllAccStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccStateResponse.Merge(m, src)
}
func (m *QueryAllAccStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccStateResponse proto.InternalMessageInfo

func (m *QueryAllAccStateResponse) GetAccState() []AccState {
	if m != nil {
		return m.AccState
	}
	return nil
}

func (m *QueryAllAccStateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAuthorityRequest struct {
}

func (m *QueryGetAuthorityRequest) Reset()         { *m = QueryGetAuthorityRequest{} }
func (m *QueryGetAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthorityRequest) ProtoMessage()    {}
func (*QueryGetAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{4}
}
func (m *QueryGetAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthorityRequest.Merge(m, src)
}
func (m *QueryGetAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthorityRequest proto.InternalMessageInfo

type QueryGetAuthorityResponse struct {
	Authority Authority `protobuf:"bytes,1,opt,name=Authority,proto3" json:"Authority"`
}

func (m *QueryGetAuthorityResponse) Reset()         { *m = QueryGetAuthorityResponse{} }
func (m *QueryGetAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthorityResponse) ProtoMessage()    {}
func (*QueryGetAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{5}
}
func (m *QueryGetAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthorityResponse.Merge(m, src)
}
func (m *QueryGetAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthorityResponse proto.InternalMessageInfo

func (m *QueryGetAuthorityResponse) GetAuthority() Authority {
	if m != nil {
		return m.Authority
	}
	return Authority{}
}

type QueryGetTreasurerRequest struct {
}

func (m *QueryGetTreasurerRequest) Reset()         { *m = QueryGetTreasurerRequest{} }
func (m *QueryGetTreasurerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTreasurerRequest) ProtoMessage()    {}
func (*QueryGetTreasurerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{6}
}
func (m *QueryGetTreasurerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTreasurerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTreasurerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTreasurerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTreasurerRequest.Merge(m, src)
}
func (m *QueryGetTreasurerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTreasurerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTreasurerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTreasurerRequest proto.InternalMessageInfo

type QueryGetTreasurerResponse struct {
	Treasurer Treasurer `protobuf:"bytes,1,opt,name=Treasurer,proto3" json:"Treasurer"`
}

func (m *QueryGetTreasurerResponse) Reset()         { *m = QueryGetTreasurerResponse{} }
func (m *QueryGetTreasurerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTreasurerResponse) ProtoMessage()    {}
func (*QueryGetTreasurerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{7}
}
func (m *QueryGetTreasurerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTreasurerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTreasurerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTreasurerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTreasurerResponse.Merge(m, src)
}
func (m *QueryGetTreasurerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTreasurerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTreasurerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTreasurerResponse proto.InternalMessageInfo

func (m *QueryGetTreasurerResponse) GetTreasurer() Treasurer {
	if m != nil {
		return m.Treasurer
	}
	return Treasurer{}
}

type QueryGetVoterRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetVoterRequest) Reset()         { *m = QueryGetVoterRequest{} }
func (m *QueryGetVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoterRequest) ProtoMessage()    {}
func (*QueryGetVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{8}
}
func (m *QueryGetVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoterRequest.Merge(m, src)
}
func (m *QueryGetVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoterRequest proto.InternalMessageInfo

func (m *QueryGetVoterRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetVoterResponse struct {
	Voter AccState `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter"`
}

func (m *QueryGetVoterResponse) Reset()         { *m = QueryGetVoterResponse{} }
func (m *QueryGetVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoterResponse) ProtoMessage()    {}
func (*QueryGetVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{9}
}
func (m *QueryGetVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoterResponse.Merge(m, src)
}
func (m *QueryGetVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoterResponse proto.InternalMessageInfo

func (m *QueryGetVoterResponse) GetVoter() AccState {
	if m != nil {
		return m.Voter
	}
	return AccState{}
}

func init() {
	proto.RegisterType((*QueryGetAccStateRequest)(nil), "ShareRing.shareledger.electoral.QueryGetAccStateRequest")
	proto.RegisterType((*QueryGetAccStateResponse)(nil), "ShareRing.shareledger.electoral.QueryGetAccStateResponse")
	proto.RegisterType((*QueryAllAccStateRequest)(nil), "ShareRing.shareledger.electoral.QueryAllAccStateRequest")
	proto.RegisterType((*QueryAllAccStateResponse)(nil), "ShareRing.shareledger.electoral.QueryAllAccStateResponse")
	proto.RegisterType((*QueryGetAuthorityRequest)(nil), "ShareRing.shareledger.electoral.QueryGetAuthorityRequest")
	proto.RegisterType((*QueryGetAuthorityResponse)(nil), "ShareRing.shareledger.electoral.QueryGetAuthorityResponse")
	proto.RegisterType((*QueryGetTreasurerRequest)(nil), "ShareRing.shareledger.electoral.QueryGetTreasurerRequest")
	proto.RegisterType((*QueryGetTreasurerResponse)(nil), "ShareRing.shareledger.electoral.QueryGetTreasurerResponse")
	proto.RegisterType((*QueryGetVoterRequest)(nil), "ShareRing.shareledger.electoral.QueryGetVoterRequest")
	proto.RegisterType((*QueryGetVoterResponse)(nil), "ShareRing.shareledger.electoral.QueryGetVoterResponse")
}

func init() { proto.RegisterFile("electoral/query.proto", fileDescriptor_e9c721b48ee5d4ec) }

var fileDescriptor_e9c721b48ee5d4ec = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0xb3, 0x2d, 0xa5, 0xa9, 0x7b, 0x41, 0x56, 0x2b, 0xd2, 0x15, 0xda, 0xa2, 0x3d, 0x00,
	0x4d, 0xd1, 0x9a, 0x04, 0xf1, 0x79, 0x4b, 0x25, 0xe8, 0x01, 0x84, 0x20, 0x41, 0x1c, 0x38, 0x80,
	0x9c, 0x8d, 0xe5, 0xac, 0xb2, 0x5d, 0xa7, 0x6b, 0xa7, 0x22, 0x42, 0x5c, 0x78, 0x02, 0x24, 0x8e,
	0xbc, 0x02, 0x07, 0x2e, 0x20, 0x1e, 0xa1, 0xc7, 0x4a, 0x5c, 0x38, 0x21, 0x94, 0xf0, 0x20, 0x68,
	0x77, 0x6d, 0xc7, 0xf9, 0x40, 0xc9, 0x86, 0x9b, 0x33, 0x9e, 0xff, 0xcc, 0x6f, 0x66, 0x67, 0x62,
	0xb0, 0x4d, 0x42, 0xe2, 0x0b, 0x16, 0xe3, 0x10, 0x1d, 0xf7, 0x48, 0xdc, 0xf7, 0xba, 0x31, 0x13,
	0x0c, 0xee, 0x36, 0xda, 0x38, 0x26, 0xf5, 0x20, 0xa2, 0x1e, 0x4f, 0x4e, 0x21, 0x69, 0x51, 0x12,
	0x7b, 0xda, 0xd9, 0xbe, 0x44, 0x19, 0xa3, 0x21, 0x41, 0xb8, 0x1b, 0x20, 0x1c, 0x45, 0x4c, 0x60,
	0x11, 0xb0, 0x88, 0x67, 0x72, 0xbb, 0xec, 0x33, 0x7e, 0xc4, 0x38, 0x6a, 0x62, 0x4e, 0xb2, 0xb8,
	0xe8, 0xa4, 0xd2, 0x24, 0x02, 0x57, 0x50, 0x17, 0xd3, 0x20, 0x4a, 0x9d, 0xa5, 0xef, 0xce, 0x88,
	0x00, 0xfb, 0xfe, 0x6b, 0x2e, 0xb0, 0x20, 0x33, 0xae, 0x7a, 0xa2, 0xcd, 0xe2, 0x40, 0xf4, 0xa7,
	0xaf, 0x44, 0x4c, 0x30, 0xef, 0xc5, 0x24, 0x96, 0x57, 0x5b, 0x94, 0x51, 0x96, 0x1e, 0x51, 0x72,
	0xca, 0xac, 0xee, 0x3e, 0xb8, 0xf8, 0x2c, 0x01, 0x39, 0x24, 0xa2, 0xe6, 0xfb, 0x8d, 0x24, 0x4b,
	0x9d, 0x1c, 0xf7, 0x08, 0x17, 0xf0, 0x02, 0x58, 0xed, 0x90, 0x7e, 0xc9, 0xba, 0x6c, 0x5d, 0xdb,
	0xa8, 0x27, 0x47, 0x97, 0x82, 0xd2, 0xb4, 0x33, 0xef, 0xb2, 0x88, 0x13, 0xf8, 0x08, 0x14, 0xb1,
	0xb4, 0xa5, 0x92, 0xcd, 0xea, 0x9e, 0x37, 0xa7, 0x5b, 0x9e, 0x0a, 0x72, 0x70, 0xee, 0xf4, 0xd7,
	0x6e, 0xa1, 0xae, 0x03, 0xb8, 0x58, 0x52, 0xd5, 0xc2, 0x70, 0x92, 0xea, 0x21, 0x00, 0xa3, 0x5e,
	0xc9, 0x4c, 0x57, 0xbc, 0xac, 0xb1, 0x5e, 0xd2, 0x58, 0x2f, 0xfb, 0x60, 0xb2, 0xb1, 0xde, 0x53,
	0x4c, 0x95, 0xb6, 0x6e, 0x28, 0xdd, 0x2f, 0x96, 0x2c, 0x66, 0x2c, 0xc7, 0xcc, 0x62, 0x56, 0xff,
	0xab, 0x18, 0x78, 0x38, 0x46, 0xbc, 0x92, 0x12, 0x5f, 0x9d, 0x4b, 0x9c, 0x91, 0x8c, 0x21, 0xdb,
	0x46, 0xfb, 0xd5, 0x77, 0x97, 0xa5, 0xb9, 0x1d, 0xb0, 0x33, 0xe3, 0x4e, 0x96, 0xf3, 0x04, 0x6c,
	0x68, 0xa3, 0x6c, 0x59, 0x79, 0x7e, 0x3d, 0x4a, 0x21, 0x0b, 0x1a, 0x85, 0x30, 0x41, 0x9e, 0xab,
	0x29, 0x9b, 0x01, 0x62, 0xdc, 0x8d, 0x40, 0xb4, 0x71, 0x61, 0x10, 0xad, 0x50, 0x20, 0xda, 0xe0,
	0xde, 0x00, 0x5b, 0x2a, 0xd9, 0x0b, 0x26, 0x34, 0x04, 0x2c, 0x81, 0x75, 0xdc, 0x6a, 0xc5, 0x84,
	0x73, 0x39, 0xbe, 0xea, 0xa7, 0xfb, 0x0a, 0x6c, 0x4f, 0x28, 0x24, 0xda, 0x03, 0xb0, 0x76, 0x92,
	0x18, 0x96, 0x1d, 0xde, 0x4c, 0x5d, 0xfd, 0xb4, 0x0e, 0xd6, 0xd2, 0x04, 0xf0, 0xbb, 0x05, 0x8a,
	0xca, 0x07, 0xde, 0x9d, 0x1b, 0xee, 0x1f, 0x5b, 0x68, 0xdf, 0x5b, 0x42, 0x99, 0x95, 0xe4, 0xde,
	0x79, 0xff, 0xe3, 0xcf, 0xc7, 0x95, 0x0a, 0x44, 0x48, 0x87, 0x40, 0x46, 0x08, 0x34, 0xf6, 0x0f,
	0x93, 0x4a, 0xd1, 0xdb, 0x0e, 0xe9, 0xbf, 0x83, 0x5f, 0x2d, 0xb0, 0xa9, 0xa2, 0xd5, 0xc2, 0x70,
	0x51, 0xfa, 0xe9, 0x6d, 0x5d, 0x94, 0x7e, 0xc6, 0x0e, 0xba, 0x95, 0x94, 0x7e, 0x1f, 0xee, 0x2d,
	0x4c, 0x0f, 0xbf, 0x59, 0xc6, 0xa0, 0xc3, 0x1c, 0x9d, 0x9b, 0xd8, 0x26, 0xfb, 0xfe, 0x32, 0x52,
	0xc9, 0x5d, 0x4d, 0xb9, 0xaf, 0xc3, 0xf2, 0x7c, 0x6e, 0x8d, 0x9a, 0x80, 0xeb, 0xa9, 0xce, 0x01,
	0x3e, 0xb9, 0x7d, 0x39, 0xc0, 0xa7, 0x96, 0x33, 0x07, 0xb8, 0x7e, 0x5a, 0xe0, 0x67, 0x0b, 0x14,
	0xd5, 0x2a, 0xc1, 0x5b, 0x0b, 0x27, 0x37, 0x97, 0xd5, 0xbe, 0x9d, 0x57, 0x96, 0x7b, 0x40, 0xa8,
	0x94, 0x1e, 0x3c, 0x3e, 0x1d, 0x38, 0xd6, 0xd9, 0xc0, 0xb1, 0x7e, 0x0f, 0x1c, 0xeb, 0xc3, 0xd0,
	0x29, 0x9c, 0x0d, 0x9d, 0xc2, 0xcf, 0xa1, 0x53, 0x78, 0x59, 0xa5, 0x81, 0x68, 0xf7, 0x9a, 0x9e,
	0xcf, 0x8e, 0x8c, 0x70, 0x0d, 0x23, 0xdc, 0x1b, 0xb3, 0x01, 0xfd, 0x2e, 0xe1, 0xcd, 0xf3, 0xe9,
	0x13, 0x7a, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x6c, 0x83, 0xd0, 0x2d, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a accState by index.
	AccState(ctx context.Context, in *QueryGetAccStateRequest, opts ...grpc.CallOption) (*QueryGetAccStateResponse, error)
	// Queries a list of accState items.
	AccStateAll(ctx context.Context, in *QueryAllAccStateRequest, opts ...grpc.CallOption) (*QueryAllAccStateResponse, error)
	// Queries a authority by index.
	Authority(ctx context.Context, in *QueryGetAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAuthorityResponse, error)
	// Queries a treasurer by index.
	Treasurer(ctx context.Context, in *QueryGetTreasurerRequest, opts ...grpc.CallOption) (*QueryGetTreasurerResponse, error)
	// Queries a list of getVoter items.
	GetVoter(ctx context.Context, in *QueryGetVoterRequest, opts ...grpc.CallOption) (*QueryGetVoterResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AccState(ctx context.Context, in *QueryGetAccStateRequest, opts ...grpc.CallOption) (*QueryGetAccStateResponse, error) {
	out := new(QueryGetAccStateResponse)
	err := c.cc.Invoke(ctx, "/ShareRing.shareledger.electoral.Query/AccState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccStateAll(ctx context.Context, in *QueryAllAccStateRequest, opts ...grpc.CallOption) (*QueryAllAccStateResponse, error) {
	out := new(QueryAllAccStateResponse)
	err := c.cc.Invoke(ctx, "/ShareRing.shareledger.electoral.Query/AccStateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Authority(ctx context.Context, in *QueryGetAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAuthorityResponse, error) {
	out := new(QueryGetAuthorityResponse)
	err := c.cc.Invoke(ctx, "/ShareRing.shareledger.electoral.Query/Authority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Treasurer(ctx context.Context, in *QueryGetTreasurerRequest, opts ...grpc.CallOption) (*QueryGetTreasurerResponse, error) {
	out := new(QueryGetTreasurerResponse)
	err := c.cc.Invoke(ctx, "/ShareRing.shareledger.electoral.Query/Treasurer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVoter(ctx context.Context, in *QueryGetVoterRequest, opts ...grpc.CallOption) (*QueryGetVoterResponse, error) {
	out := new(QueryGetVoterResponse)
	err := c.cc.Invoke(ctx, "/ShareRing.shareledger.electoral.Query/GetVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a accState by index.
	AccState(context.Context, *QueryGetAccStateRequest) (*QueryGetAccStateResponse, error)
	// Queries a list of accState items.
	AccStateAll(context.Context, *QueryAllAccStateRequest) (*QueryAllAccStateResponse, error)
	// Queries a authority by index.
	Authority(context.Context, *QueryGetAuthorityRequest) (*QueryGetAuthorityResponse, error)
	// Queries a treasurer by index.
	Treasurer(context.Context, *QueryGetTreasurerRequest) (*QueryGetTreasurerResponse, error)
	// Queries a list of getVoter items.
	GetVoter(context.Context, *QueryGetVoterRequest) (*QueryGetVoterResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AccState(ctx context.Context, req *QueryGetAccStateRequest) (*QueryGetAccStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccState not implemented")
}
func (*UnimplementedQueryServer) AccStateAll(ctx context.Context, req *QueryAllAccStateRequest) (*QueryAllAccStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccStateAll not implemented")
}
func (*UnimplementedQueryServer) Authority(ctx context.Context, req *QueryGetAuthorityRequest) (*QueryGetAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authority not implemented")
}
func (*UnimplementedQueryServer) Treasurer(ctx context.Context, req *QueryGetTreasurerRequest) (*QueryGetTreasurerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Treasurer not implemented")
}
func (*UnimplementedQueryServer) GetVoter(ctx context.Context, req *QueryGetVoterRequest) (*QueryGetVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoter not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AccState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShareRing.shareledger.electoral.Query/AccState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccState(ctx, req.(*QueryGetAccStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccStateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccStateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShareRing.shareledger.electoral.Query/AccStateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccStateAll(ctx, req.(*QueryAllAccStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Authority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Authority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShareRing.shareledger.electoral.Query/Authority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Authority(ctx, req.(*QueryGetAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Treasurer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTreasurerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Treasurer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShareRing.shareledger.electoral.Query/Treasurer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Treasurer(ctx, req.(*QueryGetTreasurerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShareRing.shareledger.electoral.Query/GetVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVoter(ctx, req.(*QueryGetVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ShareRing.shareledger.electoral.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccState",
			Handler:    _Query_AccState_Handler,
		},
		{
			MethodName: "AccStateAll",
			Handler:    _Query_AccStateAll_Handler,
		},
		{
			MethodName: "Authority",
			Handler:    _Query_Authority_Handler,
		},
		{
			MethodName: "Treasurer",
			Handler:    _Query_Treasurer_Handler,
		},
		{
			MethodName: "GetVoter",
			Handler:    _Query_GetVoter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "electoral/query.proto",
}

func (m *QueryGetAccStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAccStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccState) > 0 {
		for iNdEx := len(m.AccState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Authority.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTreasurerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTreasurerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTreasurerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTreasurerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTreasurerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTreasurerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Treasurer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAccStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAccStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccState) > 0 {
		for _, e := range m.AccState {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Authority.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTreasurerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTreasurerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Treasurer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Voter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAccStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccState = append(m.AccState, AccState{})
			if err := m.AccState[len(m.AccState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTreasurerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTreasurerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTreasurerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTreasurerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTreasurerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTreasurerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasurer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Treasurer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
