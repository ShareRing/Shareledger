// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	EnrollVoter(ctx context.Context, in *MsgEnrollVoter, opts ...grpc.CallOption) (*MsgEnrollVoterResponse, error)
	RevokeVoter(ctx context.Context, in *MsgRevokeVoter, opts ...grpc.CallOption) (*MsgRevokeVoterResponse, error)
	EnrollLoaders(ctx context.Context, in *MsgEnrollLoaders, opts ...grpc.CallOption) (*MsgEnrollLoadersResponse, error)
	RevokeLoaders(ctx context.Context, in *MsgRevokeLoaders, opts ...grpc.CallOption) (*MsgRevokeLoadersResponse, error)
	EnrollIdSigners(ctx context.Context, in *MsgEnrollIdSigners, opts ...grpc.CallOption) (*MsgEnrollIdSignersResponse, error)
	RevokeIdSigners(ctx context.Context, in *MsgRevokeIdSigners, opts ...grpc.CallOption) (*MsgRevokeIdSignersResponse, error)
	EnrollDocIssuers(ctx context.Context, in *MsgEnrollDocIssuers, opts ...grpc.CallOption) (*MsgEnrollDocIssuersResponse, error)
	RevokeDocIssuers(ctx context.Context, in *MsgRevokeDocIssuers, opts ...grpc.CallOption) (*MsgRevokeDocIssuersResponse, error)
	EnrollAccountOperators(ctx context.Context, in *MsgEnrollAccountOperators, opts ...grpc.CallOption) (*MsgEnrollAccountOperatorsResponse, error)
	RevokeAccountOperators(ctx context.Context, in *MsgRevokeAccountOperators, opts ...grpc.CallOption) (*MsgRevokeAccountOperatorsResponse, error)
	EnrollRelayers(ctx context.Context, in *MsgEnrollRelayers, opts ...grpc.CallOption) (*MsgEnrollRelayersResponse, error)
	RevokeRelayers(ctx context.Context, in *MsgRevokeRelayers, opts ...grpc.CallOption) (*MsgRevokeRelayersResponse, error)
	EnrollApprovers(ctx context.Context, in *MsgEnrollApprovers, opts ...grpc.CallOption) (*MsgEnrollApproversResponse, error)
	RevokeApprovers(ctx context.Context, in *MsgRevokeApprovers, opts ...grpc.CallOption) (*MsgRevokeApproversResponse, error)
	EnrollSwapManagers(ctx context.Context, in *MsgEnrollSwapManagers, opts ...grpc.CallOption) (*MsgEnrollSwapManagersResponse, error)
	RevokeSwapManagers(ctx context.Context, in *MsgRevokeSwapManagers, opts ...grpc.CallOption) (*MsgRevokeSwapManagersResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) EnrollVoter(ctx context.Context, in *MsgEnrollVoter, opts ...grpc.CallOption) (*MsgEnrollVoterResponse, error) {
	out := new(MsgEnrollVoterResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeVoter(ctx context.Context, in *MsgRevokeVoter, opts ...grpc.CallOption) (*MsgRevokeVoterResponse, error) {
	out := new(MsgRevokeVoterResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollLoaders(ctx context.Context, in *MsgEnrollLoaders, opts ...grpc.CallOption) (*MsgEnrollLoadersResponse, error) {
	out := new(MsgEnrollLoadersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollLoaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeLoaders(ctx context.Context, in *MsgRevokeLoaders, opts ...grpc.CallOption) (*MsgRevokeLoadersResponse, error) {
	out := new(MsgRevokeLoadersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeLoaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollIdSigners(ctx context.Context, in *MsgEnrollIdSigners, opts ...grpc.CallOption) (*MsgEnrollIdSignersResponse, error) {
	out := new(MsgEnrollIdSignersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollIdSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeIdSigners(ctx context.Context, in *MsgRevokeIdSigners, opts ...grpc.CallOption) (*MsgRevokeIdSignersResponse, error) {
	out := new(MsgRevokeIdSignersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeIdSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollDocIssuers(ctx context.Context, in *MsgEnrollDocIssuers, opts ...grpc.CallOption) (*MsgEnrollDocIssuersResponse, error) {
	out := new(MsgEnrollDocIssuersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollDocIssuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeDocIssuers(ctx context.Context, in *MsgRevokeDocIssuers, opts ...grpc.CallOption) (*MsgRevokeDocIssuersResponse, error) {
	out := new(MsgRevokeDocIssuersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeDocIssuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollAccountOperators(ctx context.Context, in *MsgEnrollAccountOperators, opts ...grpc.CallOption) (*MsgEnrollAccountOperatorsResponse, error) {
	out := new(MsgEnrollAccountOperatorsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollAccountOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeAccountOperators(ctx context.Context, in *MsgRevokeAccountOperators, opts ...grpc.CallOption) (*MsgRevokeAccountOperatorsResponse, error) {
	out := new(MsgRevokeAccountOperatorsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeAccountOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollRelayers(ctx context.Context, in *MsgEnrollRelayers, opts ...grpc.CallOption) (*MsgEnrollRelayersResponse, error) {
	out := new(MsgEnrollRelayersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollRelayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeRelayers(ctx context.Context, in *MsgRevokeRelayers, opts ...grpc.CallOption) (*MsgRevokeRelayersResponse, error) {
	out := new(MsgRevokeRelayersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeRelayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollApprovers(ctx context.Context, in *MsgEnrollApprovers, opts ...grpc.CallOption) (*MsgEnrollApproversResponse, error) {
	out := new(MsgEnrollApproversResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollApprovers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeApprovers(ctx context.Context, in *MsgRevokeApprovers, opts ...grpc.CallOption) (*MsgRevokeApproversResponse, error) {
	out := new(MsgRevokeApproversResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeApprovers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollSwapManagers(ctx context.Context, in *MsgEnrollSwapManagers, opts ...grpc.CallOption) (*MsgEnrollSwapManagersResponse, error) {
	out := new(MsgEnrollSwapManagersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/EnrollSwapManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeSwapManagers(ctx context.Context, in *MsgRevokeSwapManagers, opts ...grpc.CallOption) (*MsgRevokeSwapManagersResponse, error) {
	out := new(MsgRevokeSwapManagersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Msg/RevokeSwapManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	EnrollVoter(context.Context, *MsgEnrollVoter) (*MsgEnrollVoterResponse, error)
	RevokeVoter(context.Context, *MsgRevokeVoter) (*MsgRevokeVoterResponse, error)
	EnrollLoaders(context.Context, *MsgEnrollLoaders) (*MsgEnrollLoadersResponse, error)
	RevokeLoaders(context.Context, *MsgRevokeLoaders) (*MsgRevokeLoadersResponse, error)
	EnrollIdSigners(context.Context, *MsgEnrollIdSigners) (*MsgEnrollIdSignersResponse, error)
	RevokeIdSigners(context.Context, *MsgRevokeIdSigners) (*MsgRevokeIdSignersResponse, error)
	EnrollDocIssuers(context.Context, *MsgEnrollDocIssuers) (*MsgEnrollDocIssuersResponse, error)
	RevokeDocIssuers(context.Context, *MsgRevokeDocIssuers) (*MsgRevokeDocIssuersResponse, error)
	EnrollAccountOperators(context.Context, *MsgEnrollAccountOperators) (*MsgEnrollAccountOperatorsResponse, error)
	RevokeAccountOperators(context.Context, *MsgRevokeAccountOperators) (*MsgRevokeAccountOperatorsResponse, error)
	EnrollRelayers(context.Context, *MsgEnrollRelayers) (*MsgEnrollRelayersResponse, error)
	RevokeRelayers(context.Context, *MsgRevokeRelayers) (*MsgRevokeRelayersResponse, error)
	EnrollApprovers(context.Context, *MsgEnrollApprovers) (*MsgEnrollApproversResponse, error)
	RevokeApprovers(context.Context, *MsgRevokeApprovers) (*MsgRevokeApproversResponse, error)
	EnrollSwapManagers(context.Context, *MsgEnrollSwapManagers) (*MsgEnrollSwapManagersResponse, error)
	RevokeSwapManagers(context.Context, *MsgRevokeSwapManagers) (*MsgRevokeSwapManagersResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) EnrollVoter(context.Context, *MsgEnrollVoter) (*MsgEnrollVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollVoter not implemented")
}
func (UnimplementedMsgServer) RevokeVoter(context.Context, *MsgRevokeVoter) (*MsgRevokeVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeVoter not implemented")
}
func (UnimplementedMsgServer) EnrollLoaders(context.Context, *MsgEnrollLoaders) (*MsgEnrollLoadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollLoaders not implemented")
}
func (UnimplementedMsgServer) RevokeLoaders(context.Context, *MsgRevokeLoaders) (*MsgRevokeLoadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeLoaders not implemented")
}
func (UnimplementedMsgServer) EnrollIdSigners(context.Context, *MsgEnrollIdSigners) (*MsgEnrollIdSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollIdSigners not implemented")
}
func (UnimplementedMsgServer) RevokeIdSigners(context.Context, *MsgRevokeIdSigners) (*MsgRevokeIdSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeIdSigners not implemented")
}
func (UnimplementedMsgServer) EnrollDocIssuers(context.Context, *MsgEnrollDocIssuers) (*MsgEnrollDocIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollDocIssuers not implemented")
}
func (UnimplementedMsgServer) RevokeDocIssuers(context.Context, *MsgRevokeDocIssuers) (*MsgRevokeDocIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDocIssuers not implemented")
}
func (UnimplementedMsgServer) EnrollAccountOperators(context.Context, *MsgEnrollAccountOperators) (*MsgEnrollAccountOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollAccountOperators not implemented")
}
func (UnimplementedMsgServer) RevokeAccountOperators(context.Context, *MsgRevokeAccountOperators) (*MsgRevokeAccountOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccountOperators not implemented")
}
func (UnimplementedMsgServer) EnrollRelayers(context.Context, *MsgEnrollRelayers) (*MsgEnrollRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollRelayers not implemented")
}
func (UnimplementedMsgServer) RevokeRelayers(context.Context, *MsgRevokeRelayers) (*MsgRevokeRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRelayers not implemented")
}
func (UnimplementedMsgServer) EnrollApprovers(context.Context, *MsgEnrollApprovers) (*MsgEnrollApproversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollApprovers not implemented")
}
func (UnimplementedMsgServer) RevokeApprovers(context.Context, *MsgRevokeApprovers) (*MsgRevokeApproversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeApprovers not implemented")
}
func (UnimplementedMsgServer) EnrollSwapManagers(context.Context, *MsgEnrollSwapManagers) (*MsgEnrollSwapManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollSwapManagers not implemented")
}
func (UnimplementedMsgServer) RevokeSwapManagers(context.Context, *MsgRevokeSwapManagers) (*MsgRevokeSwapManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSwapManagers not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_EnrollVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollVoter(ctx, req.(*MsgEnrollVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeVoter(ctx, req.(*MsgRevokeVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollLoaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollLoaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollLoaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollLoaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollLoaders(ctx, req.(*MsgEnrollLoaders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeLoaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeLoaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeLoaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeLoaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeLoaders(ctx, req.(*MsgRevokeLoaders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollIdSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollIdSigners)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollIdSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollIdSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollIdSigners(ctx, req.(*MsgEnrollIdSigners))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeIdSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeIdSigners)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeIdSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeIdSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeIdSigners(ctx, req.(*MsgRevokeIdSigners))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollDocIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollDocIssuers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollDocIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollDocIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollDocIssuers(ctx, req.(*MsgEnrollDocIssuers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeDocIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeDocIssuers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeDocIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeDocIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeDocIssuers(ctx, req.(*MsgRevokeDocIssuers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollAccountOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollAccountOperators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollAccountOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollAccountOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollAccountOperators(ctx, req.(*MsgEnrollAccountOperators))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeAccountOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeAccountOperators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeAccountOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeAccountOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeAccountOperators(ctx, req.(*MsgRevokeAccountOperators))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollRelayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollRelayers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollRelayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollRelayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollRelayers(ctx, req.(*MsgEnrollRelayers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeRelayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeRelayers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeRelayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeRelayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeRelayers(ctx, req.(*MsgRevokeRelayers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollApprovers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollApprovers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollApprovers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollApprovers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollApprovers(ctx, req.(*MsgEnrollApprovers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeApprovers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeApprovers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeApprovers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeApprovers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeApprovers(ctx, req.(*MsgRevokeApprovers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollSwapManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollSwapManagers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollSwapManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/EnrollSwapManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollSwapManagers(ctx, req.(*MsgEnrollSwapManagers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeSwapManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeSwapManagers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeSwapManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Msg/RevokeSwapManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeSwapManagers(ctx, req.(*MsgRevokeSwapManagers))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.electoral.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollVoter",
			Handler:    _Msg_EnrollVoter_Handler,
		},
		{
			MethodName: "RevokeVoter",
			Handler:    _Msg_RevokeVoter_Handler,
		},
		{
			MethodName: "EnrollLoaders",
			Handler:    _Msg_EnrollLoaders_Handler,
		},
		{
			MethodName: "RevokeLoaders",
			Handler:    _Msg_RevokeLoaders_Handler,
		},
		{
			MethodName: "EnrollIdSigners",
			Handler:    _Msg_EnrollIdSigners_Handler,
		},
		{
			MethodName: "RevokeIdSigners",
			Handler:    _Msg_RevokeIdSigners_Handler,
		},
		{
			MethodName: "EnrollDocIssuers",
			Handler:    _Msg_EnrollDocIssuers_Handler,
		},
		{
			MethodName: "RevokeDocIssuers",
			Handler:    _Msg_RevokeDocIssuers_Handler,
		},
		{
			MethodName: "EnrollAccountOperators",
			Handler:    _Msg_EnrollAccountOperators_Handler,
		},
		{
			MethodName: "RevokeAccountOperators",
			Handler:    _Msg_RevokeAccountOperators_Handler,
		},
		{
			MethodName: "EnrollRelayers",
			Handler:    _Msg_EnrollRelayers_Handler,
		},
		{
			MethodName: "RevokeRelayers",
			Handler:    _Msg_RevokeRelayers_Handler,
		},
		{
			MethodName: "EnrollApprovers",
			Handler:    _Msg_EnrollApprovers_Handler,
		},
		{
			MethodName: "RevokeApprovers",
			Handler:    _Msg_RevokeApprovers_Handler,
		},
		{
			MethodName: "EnrollSwapManagers",
			Handler:    _Msg_EnrollSwapManagers_Handler,
		},
		{
			MethodName: "RevokeSwapManagers",
			Handler:    _Msg_RevokeSwapManagers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/electoral/v1/tx.proto",
}
