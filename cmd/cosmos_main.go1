package main

import (
	"encoding/json"
	"os"

	"github.com/spf13/cobra"

	abci "github.com/tendermint/tendermint/abci/types"
	//tmtypes "github.com/tendermint/tendermint/types"
	"github.com/tendermint/tmlibs/cli"
	dbm "github.com/tendermint/tmlibs/db"
	"github.com/tendermint/tmlibs/log"

	"../app"
	"bitbucket.org/shareringvn/cosmos-sdk/server"
)
func main() {
	cdc := app.MakeCodec()
	ctx := server.NewDefaultContext()

	rootCmd := &cobra.Command{
		Use:               "shareledgerd",
		Short:             "shareledgerd Daemon (server)",
		PersistentPreRunE: server.PersistentPreRunEFn(ctx),
	}

	server.AddCommands(ctx, cdc, rootCmd, server.DefaultAppInit,
		server.ConstructAppCreator(newApp, "shareledgerd"))

	// prepare and add flags
	rootDir := os.ExpandEnv("$HOME/.basecoind")
	executor := cli.PrepareBaseCmd(rootCmd, "BC", rootDir)
	executor.Execute()
}

func newApp(logger log.Logger, db dbm.DB) abci.Application {
	return app.NewShareLedgerApp(logger, db)
}

//func main() {
//	cdc := app.MakeCodec()
//	ctx := server.NewDefaultContext()
//
//	rootCmd := &cobra.Command{
//		Use:               "Shareledger",
//		Short:             "Shareledger Daemon (server)",
//		PersistentPreRunE: server.PersistentPreRunEFn(ctx),
//	}
//
//	server.AddCommands(ctx, cdc, rootCmd, server.DefaultAppInit,
//		server.ConstructAppCreator(newApp, "shareledger"),
//		server.ConstructAppExporter(exportAppStateAndTMValidators, "shareledger"))
//
//	// prepare and add flags
//	rootDir := os.ExpandEnv("$HOME/.basecoind")
//	executor := cli.PrepareBaseCmd(rootCmd, "BC", rootDir)
//	err := executor.Execute()
//	if err != nil {
//		// handle with #870
//		panic(err)
//	}
//}
//
//func newApp(logger log.Logger, db dbm.DB) abci.Application {
//	return app.NewShareLedgerApp(logger, db).(abci.Application)
//}
//
//func exportAppStateAndTMValidators(logger log.Logger, db dbm.DB) (json.RawMessage, []tmtypes.GenesisValidator, error) {
//	sapp := app.NewShareLedgerApp(logger, db)
//	return sapp.ExportAppStateAndValidators()
//}
