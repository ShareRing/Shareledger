// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a accState by index.
	AccState(ctx context.Context, in *QueryAccStateRequest, opts ...grpc.CallOption) (*QueryAccStateResponse, error)
	// Queries a list of accState items.
	AccStates(ctx context.Context, in *QueryAccStatesRequest, opts ...grpc.CallOption) (*QueryAccStatesResponse, error)
	// Queries a list of Voter items.
	Voter(ctx context.Context, in *QueryVoterRequest, opts ...grpc.CallOption) (*QueryVoterResponse, error)
	// Queries a list of Loader items.
	Loader(ctx context.Context, in *QueryLoaderRequest, opts ...grpc.CallOption) (*QueryLoaderResponse, error)
	// Queries a list of idSigner items.
	IdSigner(ctx context.Context, in *QueryIdSignerRequest, opts ...grpc.CallOption) (*QueryIdSignerResponse, error)
	// Queries a list of idSigners items.
	IdSigners(ctx context.Context, in *QueryIdSignersRequest, opts ...grpc.CallOption) (*QueryIdSignersResponse, error)
	// Queries a list of accountOperator items.
	AccountOperator(ctx context.Context, in *QueryAccountOperatorRequest, opts ...grpc.CallOption) (*QueryAccountOperatorResponse, error)
	// Queries a list of accountOperators items.
	AccountOperators(ctx context.Context, in *QueryAccountOperatorsRequest, opts ...grpc.CallOption) (*QueryAccountOperatorsResponse, error)
	// Queries a list of documentIssuer items.
	DocumentIssuer(ctx context.Context, in *QueryDocumentIssuerRequest, opts ...grpc.CallOption) (*QueryDocumentIssuerResponse, error)
	// Queries a list of documentIssuers items.
	DocumentIssuers(ctx context.Context, in *QueryDocumentIssuersRequest, opts ...grpc.CallOption) (*QueryDocumentIssuersResponse, error)
	// Queries a list of Voters items.
	Voters(ctx context.Context, in *QueryVotersRequest, opts ...grpc.CallOption) (*QueryVotersResponse, error)
	// Queries a list of Loaders items.
	Loaders(ctx context.Context, in *QueryLoadersRequest, opts ...grpc.CallOption) (*QueryLoadersResponse, error)
	// Queries a list of Approver items.
	Approver(ctx context.Context, in *QueryApproverRequest, opts ...grpc.CallOption) (*QueryApproverResponse, error)
	// Queries a list of Relayer items.
	Relayer(ctx context.Context, in *QueryRelayerRequest, opts ...grpc.CallOption) (*QueryRelayerResponse, error)
	// Queries a list of Relayers items.
	Relayers(ctx context.Context, in *QueryRelayersRequest, opts ...grpc.CallOption) (*QueryRelayersResponse, error)
	// Queries a list of Approves items.
	Approvers(ctx context.Context, in *QueryApproversRequest, opts ...grpc.CallOption) (*QueryApproversResponse, error)
	// Queries a list of SwapManager items.
	SwapManager(ctx context.Context, in *QuerySwapManagerRequest, opts ...grpc.CallOption) (*QuerySwapManagerResponse, error)
	// Queries a list of SwapManagers items.
	SwapManagers(ctx context.Context, in *QuerySwapManagersRequest, opts ...grpc.CallOption) (*QuerySwapManagersResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AccState(ctx context.Context, in *QueryAccStateRequest, opts ...grpc.CallOption) (*QueryAccStateResponse, error) {
	out := new(QueryAccStateResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccStates(ctx context.Context, in *QueryAccStatesRequest, opts ...grpc.CallOption) (*QueryAccStatesResponse, error) {
	out := new(QueryAccStatesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Voter(ctx context.Context, in *QueryVoterRequest, opts ...grpc.CallOption) (*QueryVoterResponse, error) {
	out := new(QueryVoterResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Voter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loader(ctx context.Context, in *QueryLoaderRequest, opts ...grpc.CallOption) (*QueryLoaderResponse, error) {
	out := new(QueryLoaderResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Loader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdSigner(ctx context.Context, in *QueryIdSignerRequest, opts ...grpc.CallOption) (*QueryIdSignerResponse, error) {
	out := new(QueryIdSignerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/IdSigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdSigners(ctx context.Context, in *QueryIdSignersRequest, opts ...grpc.CallOption) (*QueryIdSignersResponse, error) {
	out := new(QueryIdSignersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/IdSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountOperator(ctx context.Context, in *QueryAccountOperatorRequest, opts ...grpc.CallOption) (*QueryAccountOperatorResponse, error) {
	out := new(QueryAccountOperatorResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccountOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountOperators(ctx context.Context, in *QueryAccountOperatorsRequest, opts ...grpc.CallOption) (*QueryAccountOperatorsResponse, error) {
	out := new(QueryAccountOperatorsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccountOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentIssuer(ctx context.Context, in *QueryDocumentIssuerRequest, opts ...grpc.CallOption) (*QueryDocumentIssuerResponse, error) {
	out := new(QueryDocumentIssuerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/DocumentIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentIssuers(ctx context.Context, in *QueryDocumentIssuersRequest, opts ...grpc.CallOption) (*QueryDocumentIssuersResponse, error) {
	out := new(QueryDocumentIssuersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/DocumentIssuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Voters(ctx context.Context, in *QueryVotersRequest, opts ...grpc.CallOption) (*QueryVotersResponse, error) {
	out := new(QueryVotersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Voters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loaders(ctx context.Context, in *QueryLoadersRequest, opts ...grpc.CallOption) (*QueryLoadersResponse, error) {
	out := new(QueryLoadersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Loaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Approver(ctx context.Context, in *QueryApproverRequest, opts ...grpc.CallOption) (*QueryApproverResponse, error) {
	out := new(QueryApproverResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Approver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Relayer(ctx context.Context, in *QueryRelayerRequest, opts ...grpc.CallOption) (*QueryRelayerResponse, error) {
	out := new(QueryRelayerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Relayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Relayers(ctx context.Context, in *QueryRelayersRequest, opts ...grpc.CallOption) (*QueryRelayersResponse, error) {
	out := new(QueryRelayersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Relayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Approvers(ctx context.Context, in *QueryApproversRequest, opts ...grpc.CallOption) (*QueryApproversResponse, error) {
	out := new(QueryApproversResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/Approvers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapManager(ctx context.Context, in *QuerySwapManagerRequest, opts ...grpc.CallOption) (*QuerySwapManagerResponse, error) {
	out := new(QuerySwapManagerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/SwapManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapManagers(ctx context.Context, in *QuerySwapManagersRequest, opts ...grpc.CallOption) (*QuerySwapManagersResponse, error) {
	out := new(QuerySwapManagersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/SwapManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Queries a accState by index.
	AccState(context.Context, *QueryAccStateRequest) (*QueryAccStateResponse, error)
	// Queries a list of accState items.
	AccStates(context.Context, *QueryAccStatesRequest) (*QueryAccStatesResponse, error)
	// Queries a list of Voter items.
	Voter(context.Context, *QueryVoterRequest) (*QueryVoterResponse, error)
	// Queries a list of Loader items.
	Loader(context.Context, *QueryLoaderRequest) (*QueryLoaderResponse, error)
	// Queries a list of idSigner items.
	IdSigner(context.Context, *QueryIdSignerRequest) (*QueryIdSignerResponse, error)
	// Queries a list of idSigners items.
	IdSigners(context.Context, *QueryIdSignersRequest) (*QueryIdSignersResponse, error)
	// Queries a list of accountOperator items.
	AccountOperator(context.Context, *QueryAccountOperatorRequest) (*QueryAccountOperatorResponse, error)
	// Queries a list of accountOperators items.
	AccountOperators(context.Context, *QueryAccountOperatorsRequest) (*QueryAccountOperatorsResponse, error)
	// Queries a list of documentIssuer items.
	DocumentIssuer(context.Context, *QueryDocumentIssuerRequest) (*QueryDocumentIssuerResponse, error)
	// Queries a list of documentIssuers items.
	DocumentIssuers(context.Context, *QueryDocumentIssuersRequest) (*QueryDocumentIssuersResponse, error)
	// Queries a list of Voters items.
	Voters(context.Context, *QueryVotersRequest) (*QueryVotersResponse, error)
	// Queries a list of Loaders items.
	Loaders(context.Context, *QueryLoadersRequest) (*QueryLoadersResponse, error)
	// Queries a list of Approver items.
	Approver(context.Context, *QueryApproverRequest) (*QueryApproverResponse, error)
	// Queries a list of Relayer items.
	Relayer(context.Context, *QueryRelayerRequest) (*QueryRelayerResponse, error)
	// Queries a list of Relayers items.
	Relayers(context.Context, *QueryRelayersRequest) (*QueryRelayersResponse, error)
	// Queries a list of Approves items.
	Approvers(context.Context, *QueryApproversRequest) (*QueryApproversResponse, error)
	// Queries a list of SwapManager items.
	SwapManager(context.Context, *QuerySwapManagerRequest) (*QuerySwapManagerResponse, error)
	// Queries a list of SwapManagers items.
	SwapManagers(context.Context, *QuerySwapManagersRequest) (*QuerySwapManagersResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) AccState(context.Context, *QueryAccStateRequest) (*QueryAccStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccState not implemented")
}
func (UnimplementedQueryServer) AccStates(context.Context, *QueryAccStatesRequest) (*QueryAccStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccStates not implemented")
}
func (UnimplementedQueryServer) Voter(context.Context, *QueryVoterRequest) (*QueryVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voter not implemented")
}
func (UnimplementedQueryServer) Loader(context.Context, *QueryLoaderRequest) (*QueryLoaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loader not implemented")
}
func (UnimplementedQueryServer) IdSigner(context.Context, *QueryIdSignerRequest) (*QueryIdSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdSigner not implemented")
}
func (UnimplementedQueryServer) IdSigners(context.Context, *QueryIdSignersRequest) (*QueryIdSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdSigners not implemented")
}
func (UnimplementedQueryServer) AccountOperator(context.Context, *QueryAccountOperatorRequest) (*QueryAccountOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountOperator not implemented")
}
func (UnimplementedQueryServer) AccountOperators(context.Context, *QueryAccountOperatorsRequest) (*QueryAccountOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountOperators not implemented")
}
func (UnimplementedQueryServer) DocumentIssuer(context.Context, *QueryDocumentIssuerRequest) (*QueryDocumentIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentIssuer not implemented")
}
func (UnimplementedQueryServer) DocumentIssuers(context.Context, *QueryDocumentIssuersRequest) (*QueryDocumentIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentIssuers not implemented")
}
func (UnimplementedQueryServer) Voters(context.Context, *QueryVotersRequest) (*QueryVotersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voters not implemented")
}
func (UnimplementedQueryServer) Loaders(context.Context, *QueryLoadersRequest) (*QueryLoadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loaders not implemented")
}
func (UnimplementedQueryServer) Approver(context.Context, *QueryApproverRequest) (*QueryApproverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approver not implemented")
}
func (UnimplementedQueryServer) Relayer(context.Context, *QueryRelayerRequest) (*QueryRelayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relayer not implemented")
}
func (UnimplementedQueryServer) Relayers(context.Context, *QueryRelayersRequest) (*QueryRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relayers not implemented")
}
func (UnimplementedQueryServer) Approvers(context.Context, *QueryApproversRequest) (*QueryApproversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approvers not implemented")
}
func (UnimplementedQueryServer) SwapManager(context.Context, *QuerySwapManagerRequest) (*QuerySwapManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapManager not implemented")
}
func (UnimplementedQueryServer) SwapManagers(context.Context, *QuerySwapManagersRequest) (*QuerySwapManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapManagers not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_AccState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccState(ctx, req.(*QueryAccStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccStates(ctx, req.(*QueryAccStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Voter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Voter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Voter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Voter(ctx, req.(*QueryVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Loader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loader(ctx, req.(*QueryLoaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/IdSigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdSigner(ctx, req.(*QueryIdSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdSignersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/IdSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdSigners(ctx, req.(*QueryIdSignersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccountOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountOperator(ctx, req.(*QueryAccountOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccountOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountOperators(ctx, req.(*QueryAccountOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/DocumentIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentIssuer(ctx, req.(*QueryDocumentIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentIssuersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/DocumentIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentIssuers(ctx, req.(*QueryDocumentIssuersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Voters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Voters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Voters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Voters(ctx, req.(*QueryVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Loaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loaders(ctx, req.(*QueryLoadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Approver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApproverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Approver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Approver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Approver(ctx, req.(*QueryApproverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Relayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Relayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Relayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Relayer(ctx, req.(*QueryRelayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Relayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Relayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Relayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Relayers(ctx, req.(*QueryRelayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Approvers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApproversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Approvers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/Approvers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Approvers(ctx, req.(*QueryApproversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/SwapManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapManager(ctx, req.(*QuerySwapManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/SwapManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapManagers(ctx, req.(*QuerySwapManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.electoral.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccState",
			Handler:    _Query_AccState_Handler,
		},
		{
			MethodName: "AccStates",
			Handler:    _Query_AccStates_Handler,
		},
		{
			MethodName: "Voter",
			Handler:    _Query_Voter_Handler,
		},
		{
			MethodName: "Loader",
			Handler:    _Query_Loader_Handler,
		},
		{
			MethodName: "IdSigner",
			Handler:    _Query_IdSigner_Handler,
		},
		{
			MethodName: "IdSigners",
			Handler:    _Query_IdSigners_Handler,
		},
		{
			MethodName: "AccountOperator",
			Handler:    _Query_AccountOperator_Handler,
		},
		{
			MethodName: "AccountOperators",
			Handler:    _Query_AccountOperators_Handler,
		},
		{
			MethodName: "DocumentIssuer",
			Handler:    _Query_DocumentIssuer_Handler,
		},
		{
			MethodName: "DocumentIssuers",
			Handler:    _Query_DocumentIssuers_Handler,
		},
		{
			MethodName: "Voters",
			Handler:    _Query_Voters_Handler,
		},
		{
			MethodName: "Loaders",
			Handler:    _Query_Loaders_Handler,
		},
		{
			MethodName: "Approver",
			Handler:    _Query_Approver_Handler,
		},
		{
			MethodName: "Relayer",
			Handler:    _Query_Relayer_Handler,
		},
		{
			MethodName: "Relayers",
			Handler:    _Query_Relayers_Handler,
		},
		{
			MethodName: "Approvers",
			Handler:    _Query_Approvers_Handler,
		},
		{
			MethodName: "SwapManager",
			Handler:    _Query_SwapManager_Handler,
		},
		{
			MethodName: "SwapManagers",
			Handler:    _Query_SwapManagers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/electoral/v1/query.proto",
}
