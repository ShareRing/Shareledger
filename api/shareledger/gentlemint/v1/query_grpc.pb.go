// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a exchangeRate by index.
	ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// Queries a levelFee by index.
	LevelFee(ctx context.Context, in *QueryLevelFeeRequest, opts ...grpc.CallOption) (*QueryLevelFeeResponse, error)
	// Queries a list of levelFee items.
	LevelFees(ctx context.Context, in *QueryLevelFeesRequest, opts ...grpc.CallOption) (*QueryLevelFeesResponse, error)
	// Queries a actionLevelFee by index.
	ActionLevelFee(ctx context.Context, in *QueryActionLevelFeeRequest, opts ...grpc.CallOption) (*QueryActionLevelFeeResponse, error)
	// Queries a list of actionLevelFee items.
	ActionLevelFees(ctx context.Context, in *QueryActionLevelFeesRequest, opts ...grpc.CallOption) (*QueryActionLevelFeesResponse, error)
	// Queries a list of checkFees items.
	CheckFees(ctx context.Context, in *QueryCheckFeesRequest, opts ...grpc.CallOption) (*QueryCheckFeesResponse, error)
	// Queries a list of balances items.
	Balances(ctx context.Context, in *QueryBalancesRequest, opts ...grpc.CallOption) (*QueryBalancesResponse, error)
	MinimumGasPrices(ctx context.Context, in *QueryMinimumGasPricesRequest, opts ...grpc.CallOption) (*QueryMinimumGasPricesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LevelFee(ctx context.Context, in *QueryLevelFeeRequest, opts ...grpc.CallOption) (*QueryLevelFeeResponse, error) {
	out := new(QueryLevelFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/LevelFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LevelFees(ctx context.Context, in *QueryLevelFeesRequest, opts ...grpc.CallOption) (*QueryLevelFeesResponse, error) {
	out := new(QueryLevelFeesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/LevelFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionLevelFee(ctx context.Context, in *QueryActionLevelFeeRequest, opts ...grpc.CallOption) (*QueryActionLevelFeeResponse, error) {
	out := new(QueryActionLevelFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/ActionLevelFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionLevelFees(ctx context.Context, in *QueryActionLevelFeesRequest, opts ...grpc.CallOption) (*QueryActionLevelFeesResponse, error) {
	out := new(QueryActionLevelFeesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/ActionLevelFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckFees(ctx context.Context, in *QueryCheckFeesRequest, opts ...grpc.CallOption) (*QueryCheckFeesResponse, error) {
	out := new(QueryCheckFeesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/CheckFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Balances(ctx context.Context, in *QueryBalancesRequest, opts ...grpc.CallOption) (*QueryBalancesResponse, error) {
	out := new(QueryBalancesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/Balances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinimumGasPrices(ctx context.Context, in *QueryMinimumGasPricesRequest, opts ...grpc.CallOption) (*QueryMinimumGasPricesResponse, error) {
	out := new(QueryMinimumGasPricesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/MinimumGasPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Queries a exchangeRate by index.
	ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// Queries a levelFee by index.
	LevelFee(context.Context, *QueryLevelFeeRequest) (*QueryLevelFeeResponse, error)
	// Queries a list of levelFee items.
	LevelFees(context.Context, *QueryLevelFeesRequest) (*QueryLevelFeesResponse, error)
	// Queries a actionLevelFee by index.
	ActionLevelFee(context.Context, *QueryActionLevelFeeRequest) (*QueryActionLevelFeeResponse, error)
	// Queries a list of actionLevelFee items.
	ActionLevelFees(context.Context, *QueryActionLevelFeesRequest) (*QueryActionLevelFeesResponse, error)
	// Queries a list of checkFees items.
	CheckFees(context.Context, *QueryCheckFeesRequest) (*QueryCheckFeesResponse, error)
	// Queries a list of balances items.
	Balances(context.Context, *QueryBalancesRequest) (*QueryBalancesResponse, error)
	MinimumGasPrices(context.Context, *QueryMinimumGasPricesRequest) (*QueryMinimumGasPricesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (UnimplementedQueryServer) LevelFee(context.Context, *QueryLevelFeeRequest) (*QueryLevelFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelFee not implemented")
}
func (UnimplementedQueryServer) LevelFees(context.Context, *QueryLevelFeesRequest) (*QueryLevelFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelFees not implemented")
}
func (UnimplementedQueryServer) ActionLevelFee(context.Context, *QueryActionLevelFeeRequest) (*QueryActionLevelFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionLevelFee not implemented")
}
func (UnimplementedQueryServer) ActionLevelFees(context.Context, *QueryActionLevelFeesRequest) (*QueryActionLevelFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionLevelFees not implemented")
}
func (UnimplementedQueryServer) CheckFees(context.Context, *QueryCheckFeesRequest) (*QueryCheckFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFees not implemented")
}
func (UnimplementedQueryServer) Balances(context.Context, *QueryBalancesRequest) (*QueryBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (UnimplementedQueryServer) MinimumGasPrices(context.Context, *QueryMinimumGasPricesRequest) (*QueryMinimumGasPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinimumGasPrices not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LevelFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLevelFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LevelFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/LevelFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LevelFee(ctx, req.(*QueryLevelFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LevelFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLevelFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LevelFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/LevelFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LevelFees(ctx, req.(*QueryLevelFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionLevelFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActionLevelFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionLevelFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/ActionLevelFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionLevelFee(ctx, req.(*QueryActionLevelFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionLevelFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActionLevelFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionLevelFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/ActionLevelFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionLevelFees(ctx, req.(*QueryActionLevelFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/CheckFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckFees(ctx, req.(*QueryCheckFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Balances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/Balances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balances(ctx, req.(*QueryBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinimumGasPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMinimumGasPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinimumGasPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/MinimumGasPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinimumGasPrices(ctx, req.(*QueryMinimumGasPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.gentlemint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "LevelFee",
			Handler:    _Query_LevelFee_Handler,
		},
		{
			MethodName: "LevelFees",
			Handler:    _Query_LevelFees_Handler,
		},
		{
			MethodName: "ActionLevelFee",
			Handler:    _Query_ActionLevelFee_Handler,
		},
		{
			MethodName: "ActionLevelFees",
			Handler:    _Query_ActionLevelFees_Handler,
		},
		{
			MethodName: "CheckFees",
			Handler:    _Query_CheckFees_Handler,
		},
		{
			MethodName: "Balances",
			Handler:    _Query_Balances_Handler,
		},
		{
			MethodName: "MinimumGasPrices",
			Handler:    _Query_MinimumGasPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/gentlemint/v1/query.proto",
}
