// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shareledger/distributionx/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetRewardRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRewardRequest) Reset()         { *m = QueryGetRewardRequest{} }
func (m *QueryGetRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardRequest) ProtoMessage()    {}
func (*QueryGetRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{2}
}
func (m *QueryGetRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardRequest.Merge(m, src)
}
func (m *QueryGetRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardRequest proto.InternalMessageInfo

func (m *QueryGetRewardRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetRewardResponse struct {
	Reward Reward `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward"`
}

func (m *QueryGetRewardResponse) Reset()         { *m = QueryGetRewardResponse{} }
func (m *QueryGetRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardResponse) ProtoMessage()    {}
func (*QueryGetRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{3}
}
func (m *QueryGetRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardResponse.Merge(m, src)
}
func (m *QueryGetRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardResponse proto.InternalMessageInfo

func (m *QueryGetRewardResponse) GetReward() Reward {
	if m != nil {
		return m.Reward
	}
	return Reward{}
}

type QueryAllRewardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRewardRequest) Reset()         { *m = QueryAllRewardRequest{} }
func (m *QueryAllRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRewardRequest) ProtoMessage()    {}
func (*QueryAllRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{4}
}
func (m *QueryAllRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRewardRequest.Merge(m, src)
}
func (m *QueryAllRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRewardRequest proto.InternalMessageInfo

func (m *QueryAllRewardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRewardResponse struct {
	Reward     []Reward            `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRewardResponse) Reset()         { *m = QueryAllRewardResponse{} }
func (m *QueryAllRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRewardResponse) ProtoMessage()    {}
func (*QueryAllRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{5}
}
func (m *QueryAllRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRewardResponse.Merge(m, src)
}
func (m *QueryAllRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRewardResponse proto.InternalMessageInfo

func (m *QueryAllRewardResponse) GetReward() []Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *QueryAllRewardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBuilderCountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBuilderCountRequest) Reset()         { *m = QueryGetBuilderCountRequest{} }
func (m *QueryGetBuilderCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuilderCountRequest) ProtoMessage()    {}
func (*QueryGetBuilderCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{6}
}
func (m *QueryGetBuilderCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuilderCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuilderCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuilderCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuilderCountRequest.Merge(m, src)
}
func (m *QueryGetBuilderCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuilderCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuilderCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuilderCountRequest proto.InternalMessageInfo

func (m *QueryGetBuilderCountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBuilderCountResponse struct {
	BuilderCount BuilderCount `protobuf:"bytes,1,opt,name=builderCount,proto3" json:"builderCount"`
}

func (m *QueryGetBuilderCountResponse) Reset()         { *m = QueryGetBuilderCountResponse{} }
func (m *QueryGetBuilderCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuilderCountResponse) ProtoMessage()    {}
func (*QueryGetBuilderCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{7}
}
func (m *QueryGetBuilderCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuilderCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuilderCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuilderCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuilderCountResponse.Merge(m, src)
}
func (m *QueryGetBuilderCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuilderCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuilderCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuilderCountResponse proto.InternalMessageInfo

func (m *QueryGetBuilderCountResponse) GetBuilderCount() BuilderCount {
	if m != nil {
		return m.BuilderCount
	}
	return BuilderCount{}
}

type QueryAllBuilderCountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuilderCountRequest) Reset()         { *m = QueryAllBuilderCountRequest{} }
func (m *QueryAllBuilderCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuilderCountRequest) ProtoMessage()    {}
func (*QueryAllBuilderCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{8}
}
func (m *QueryAllBuilderCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuilderCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuilderCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuilderCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuilderCountRequest.Merge(m, src)
}
func (m *QueryAllBuilderCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuilderCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuilderCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuilderCountRequest proto.InternalMessageInfo

func (m *QueryAllBuilderCountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBuilderCountResponse struct {
	BuilderCount []BuilderCount      `protobuf:"bytes,1,rep,name=builderCount,proto3" json:"builderCount"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuilderCountResponse) Reset()         { *m = QueryAllBuilderCountResponse{} }
func (m *QueryAllBuilderCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuilderCountResponse) ProtoMessage()    {}
func (*QueryAllBuilderCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{9}
}
func (m *QueryAllBuilderCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuilderCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuilderCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuilderCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuilderCountResponse.Merge(m, src)
}
func (m *QueryAllBuilderCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuilderCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuilderCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuilderCountResponse proto.InternalMessageInfo

func (m *QueryAllBuilderCountResponse) GetBuilderCount() []BuilderCount {
	if m != nil {
		return m.BuilderCount
	}
	return nil
}

func (m *QueryAllBuilderCountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBuilderListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBuilderListRequest) Reset()         { *m = QueryGetBuilderListRequest{} }
func (m *QueryGetBuilderListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuilderListRequest) ProtoMessage()    {}
func (*QueryGetBuilderListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{10}
}
func (m *QueryGetBuilderListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuilderListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuilderListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuilderListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuilderListRequest.Merge(m, src)
}
func (m *QueryGetBuilderListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuilderListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuilderListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuilderListRequest proto.InternalMessageInfo

func (m *QueryGetBuilderListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBuilderListResponse struct {
	BuilderList BuilderList `protobuf:"bytes,1,opt,name=BuilderList,proto3" json:"BuilderList"`
}

func (m *QueryGetBuilderListResponse) Reset()         { *m = QueryGetBuilderListResponse{} }
func (m *QueryGetBuilderListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuilderListResponse) ProtoMessage()    {}
func (*QueryGetBuilderListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{11}
}
func (m *QueryGetBuilderListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuilderListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuilderListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuilderListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuilderListResponse.Merge(m, src)
}
func (m *QueryGetBuilderListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuilderListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuilderListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuilderListResponse proto.InternalMessageInfo

func (m *QueryGetBuilderListResponse) GetBuilderList() BuilderList {
	if m != nil {
		return m.BuilderList
	}
	return BuilderList{}
}

type QueryAllBuilderListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuilderListRequest) Reset()         { *m = QueryAllBuilderListRequest{} }
func (m *QueryAllBuilderListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuilderListRequest) ProtoMessage()    {}
func (*QueryAllBuilderListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{12}
}
func (m *QueryAllBuilderListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuilderListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuilderListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuilderListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuilderListRequest.Merge(m, src)
}
func (m *QueryAllBuilderListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuilderListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuilderListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuilderListRequest proto.InternalMessageInfo

func (m *QueryAllBuilderListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBuilderListResponse struct {
	BuilderList []BuilderList       `protobuf:"bytes,1,rep,name=BuilderList,proto3" json:"BuilderList"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuilderListResponse) Reset()         { *m = QueryAllBuilderListResponse{} }
func (m *QueryAllBuilderListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuilderListResponse) ProtoMessage()    {}
func (*QueryAllBuilderListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1729268489b08d55, []int{13}
}
func (m *QueryAllBuilderListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuilderListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuilderListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuilderListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuilderListResponse.Merge(m, src)
}
func (m *QueryAllBuilderListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuilderListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuilderListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuilderListResponse proto.InternalMessageInfo

func (m *QueryAllBuilderListResponse) GetBuilderList() []BuilderList {
	if m != nil {
		return m.BuilderList
	}
	return nil
}

func (m *QueryAllBuilderListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "shareledger.distributionx.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "shareledger.distributionx.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetRewardRequest)(nil), "shareledger.distributionx.v1.QueryGetRewardRequest")
	proto.RegisterType((*QueryGetRewardResponse)(nil), "shareledger.distributionx.v1.QueryGetRewardResponse")
	proto.RegisterType((*QueryAllRewardRequest)(nil), "shareledger.distributionx.v1.QueryAllRewardRequest")
	proto.RegisterType((*QueryAllRewardResponse)(nil), "shareledger.distributionx.v1.QueryAllRewardResponse")
	proto.RegisterType((*QueryGetBuilderCountRequest)(nil), "shareledger.distributionx.v1.QueryGetBuilderCountRequest")
	proto.RegisterType((*QueryGetBuilderCountResponse)(nil), "shareledger.distributionx.v1.QueryGetBuilderCountResponse")
	proto.RegisterType((*QueryAllBuilderCountRequest)(nil), "shareledger.distributionx.v1.QueryAllBuilderCountRequest")
	proto.RegisterType((*QueryAllBuilderCountResponse)(nil), "shareledger.distributionx.v1.QueryAllBuilderCountResponse")
	proto.RegisterType((*QueryGetBuilderListRequest)(nil), "shareledger.distributionx.v1.QueryGetBuilderListRequest")
	proto.RegisterType((*QueryGetBuilderListResponse)(nil), "shareledger.distributionx.v1.QueryGetBuilderListResponse")
	proto.RegisterType((*QueryAllBuilderListRequest)(nil), "shareledger.distributionx.v1.QueryAllBuilderListRequest")
	proto.RegisterType((*QueryAllBuilderListResponse)(nil), "shareledger.distributionx.v1.QueryAllBuilderListResponse")
}

func init() {
	proto.RegisterFile("shareledger/distributionx/v1/query.proto", fileDescriptor_1729268489b08d55)
}

var fileDescriptor_1729268489b08d55 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0xb6, 0xed, 0x42, 0xa7, 0xa5, 0xc2, 0x58, 0x45, 0x62, 0x59, 0x25, 0x88, 0xb6,
	0xd5, 0x26, 0xdd, 0x6e, 0x2d, 0xdd, 0x2a, 0x42, 0x57, 0xb0, 0x17, 0x0f, 0xed, 0xe2, 0x45, 0x11,
	0x4a, 0xd2, 0x0c, 0xe9, 0x40, 0x9a, 0x49, 0x93, 0x6c, 0x6d, 0x29, 0xbd, 0xf8, 0x17, 0x08, 0xfe,
	0x07, 0x82, 0x20, 0x78, 0xf1, 0xea, 0x41, 0x10, 0xf1, 0x50, 0x6f, 0x05, 0x2f, 0x9e, 0x44, 0x5a,
	0xff, 0x10, 0xc9, 0xcc, 0x6b, 0x9b, 0xec, 0x8f, 0x98, 0x6c, 0xf7, 0x96, 0x4e, 0xdf, 0xf7, 0xcd,
	0xe7, 0xfb, 0xde, 0xdb, 0x97, 0xe0, 0xc9, 0x60, 0xd3, 0xf0, 0xa9, 0x43, 0x2d, 0x9b, 0xfa, 0xba,
	0xc5, 0x82, 0xd0, 0x67, 0x66, 0x33, 0x64, 0xdc, 0xdd, 0xd5, 0x77, 0x2a, 0xfa, 0x76, 0x93, 0xfa,
	0x7b, 0x9a, 0xe7, 0xf3, 0x90, 0x93, 0x89, 0x58, 0xa4, 0x96, 0x88, 0xd4, 0x76, 0x2a, 0xca, 0xf4,
	0x06, 0x0f, 0xb6, 0x78, 0xa0, 0x9b, 0x46, 0x40, 0xa5, 0x4c, 0xdf, 0xa9, 0x98, 0x34, 0x34, 0x2a,
	0xba, 0x67, 0xd8, 0xcc, 0x35, 0xa2, 0x48, 0x99, 0x49, 0x19, 0xb7, 0xb9, 0xcd, 0xc5, 0xa3, 0x1e,
	0x3d, 0xc1, 0xe9, 0x84, 0xcd, 0xb9, 0xed, 0x50, 0xdd, 0xf0, 0x98, 0x6e, 0xb8, 0x2e, 0x0f, 0x85,
	0x24, 0x80, 0xff, 0x4e, 0xa5, 0x72, 0x7a, 0x86, 0x6f, 0x6c, 0x65, 0x0b, 0xf5, 0xe9, 0x2b, 0xc3,
	0xb7, 0x20, 0x74, 0x36, 0x35, 0xd4, 0x6c, 0x32, 0xc7, 0xa2, 0xfe, 0xfa, 0x06, 0x6f, 0xba, 0x21,
	0x28, 0xf4, 0x4c, 0x0a, 0x87, 0x05, 0x20, 0x50, 0xc7, 0x31, 0x59, 0x8b, 0xca, 0xb1, 0x2a, 0x10,
	0x1b, 0x74, 0xbb, 0x49, 0x83, 0x50, 0x7d, 0x8e, 0x2f, 0x27, 0x4e, 0x03, 0x8f, 0xbb, 0x01, 0x25,
	0x75, 0x5c, 0x92, 0x56, 0xae, 0xa1, 0x9b, 0x68, 0x72, 0x64, 0xee, 0x96, 0x96, 0x56, 0x74, 0x4d,
	0xaa, 0xeb, 0x83, 0x87, 0xbf, 0x6f, 0x14, 0x1a, 0xa0, 0x54, 0x67, 0xf0, 0x15, 0x91, 0x7a, 0x85,
	0x86, 0x0d, 0xe1, 0x15, 0xee, 0x24, 0xe3, 0x78, 0x88, 0xb9, 0x16, 0xdd, 0x15, 0xb9, 0x87, 0x1b,
	0xf2, 0x0f, 0xf5, 0x25, 0xbe, 0xda, 0x1a, 0x7e, 0x0e, 0x23, 0x8b, 0x95, 0x0d, 0x46, 0xaa, 0x4f,
	0x61, 0xa4, 0x52, 0x5d, 0x07, 0x98, 0x65, 0xc7, 0x49, 0xc2, 0x3c, 0xc1, 0xf8, 0x7c, 0x2e, 0xe0,
	0x82, 0xdb, 0x9a, 0x1c, 0x22, 0x2d, 0x1a, 0x22, 0x4d, 0xce, 0x1e, 0x0c, 0x91, 0xb6, 0x6a, 0xd8,
	0x14, 0xb4, 0x8d, 0x98, 0x52, 0x7d, 0x8f, 0x80, 0x3f, 0x76, 0x43, 0x07, 0xfe, 0x81, 0xde, 0xf8,
	0xc9, 0x4a, 0x02, 0xb3, 0x28, 0x30, 0xef, 0xfc, 0x17, 0x53, 0x02, 0x24, 0x38, 0xab, 0xf8, 0xfa,
	0x69, 0x99, 0xeb, 0x72, 0x48, 0x1e, 0x47, 0x53, 0x95, 0xde, 0x9b, 0x10, 0x4f, 0x74, 0x16, 0x81,
	0xc3, 0x67, 0x78, 0xd4, 0x8c, 0x9d, 0x43, 0x19, 0xa7, 0xd3, 0x7d, 0xc6, 0x33, 0x81, 0xdb, 0x44,
	0x16, 0x95, 0x02, 0xea, 0xb2, 0xe3, 0x74, 0x42, 0xed, 0x57, 0xe7, 0xbe, 0x20, 0x70, 0xd7, 0x76,
	0x4f, 0x57, 0x77, 0x03, 0x17, 0x77, 0xd7, 0xbf, 0x8e, 0xde, 0xc3, 0x4a, 0x4b, 0x73, 0x9e, 0xb2,
	0xe0, 0xac, 0x4a, 0x63, 0xb8, 0xc8, 0xe4, 0x0f, 0x67, 0xb0, 0x51, 0x64, 0x96, 0xea, 0xb5, 0xf5,
	0x5f, 0x46, 0x83, 0xd7, 0x35, 0x3c, 0x12, 0x3b, 0x86, 0xaa, 0x4e, 0x65, 0xb2, 0x1a, 0x09, 0xc0,
	0x69, 0x3c, 0x87, 0x6a, 0x01, 0xdf, 0x79, 0x79, 0xe3, 0x7c, 0xfd, 0xea, 0xe2, 0x67, 0xd4, 0x36,
	0x2d, 0xe9, 0xc6, 0x06, 0x2e, 0x6a, 0xac, 0x6f, 0x1d, 0x9c, 0xfb, 0x80, 0xf1, 0x90, 0x60, 0x27,
	0xef, 0x10, 0x2e, 0xc9, 0x65, 0x4a, 0x66, 0xd3, 0xd9, 0xda, 0x77, 0xb9, 0x52, 0xc9, 0xa1, 0x90,
	0x14, 0x6a, 0xf5, 0xf5, 0xcf, 0xbf, 0x6f, 0x8b, 0x33, 0xe4, 0xae, 0x7c, 0x9d, 0xf8, 0xcc, 0xb5,
	0x53, 0x5e, 0x2c, 0x72, 0xb1, 0x93, 0x4f, 0x08, 0x97, 0xe4, 0x92, 0x22, 0xd5, 0x0c, 0x57, 0xb6,
	0xee, 0x7f, 0x65, 0x3e, 0x9f, 0x08, 0x50, 0x1f, 0x08, 0xd4, 0xfb, 0xa4, 0x9a, 0x09, 0x55, 0xae,
	0x4d, 0x7d, 0x5f, 0xec, 0xaf, 0x03, 0xf2, 0x11, 0xe1, 0x61, 0x99, 0x6f, 0xd9, 0x71, 0x32, 0x51,
	0xb7, 0xbe, 0x28, 0x32, 0x51, 0xb7, 0xed, 0xfe, 0x9c, 0x05, 0x86, 0x65, 0xff, 0x03, 0xe1, 0xd1,
	0xf8, 0xfe, 0x20, 0xb5, 0x6c, 0x15, 0xeb, 0xb0, 0x25, 0x95, 0xa5, 0x5e, 0xa4, 0x00, 0x5f, 0x17,
	0xf0, 0x0f, 0xc9, 0x52, 0x26, 0xf8, 0xc4, 0x57, 0xca, 0x59, 0xe5, 0xbf, 0x23, 0x7c, 0x29, 0x9e,
	0x3c, 0xaa, 0x7f, 0x2d, 0x5b, 0x29, 0x7b, 0xb5, 0xd3, 0x65, 0x8f, 0xab, 0x4b, 0xc2, 0xce, 0x3c,
	0x99, 0xcb, 0x6f, 0x87, 0x7c, 0x43, 0x89, 0xfd, 0x41, 0x16, 0x73, 0x95, 0x35, 0xb6, 0xf0, 0x94,
	0x5a, 0x0f, 0x4a, 0x30, 0xf0, 0x48, 0x18, 0x58, 0x24, 0x0b, 0xb9, 0x0c, 0x44, 0xdf, 0x80, 0xfa,
	0x3e, 0xb3, 0x0e, 0xc8, 0x57, 0x84, 0xc7, 0x62, 0x79, 0xa3, 0x56, 0x2c, 0xe6, 0xaa, 0x67, 0x5e,
	0x1f, 0x9d, 0x77, 0xb1, 0x5a, 0x13, 0x3e, 0xaa, 0xa4, 0x92, 0xdb, 0x47, 0x7d, 0xf5, 0xf0, 0xb8,
	0x8c, 0x8e, 0x8e, 0xcb, 0xe8, 0xcf, 0x71, 0x19, 0xbd, 0x39, 0x29, 0x17, 0x8e, 0x4e, 0xca, 0x85,
	0x5f, 0x27, 0xe5, 0xc2, 0x8b, 0x05, 0x9b, 0x85, 0x9b, 0x4d, 0x53, 0xdb, 0xe0, 0x5b, 0x5d, 0xd2,
	0xee, 0xb6, 0x24, 0x0e, 0xf7, 0x3c, 0x1a, 0x98, 0x25, 0xf1, 0x79, 0x5c, 0xfd, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xc5, 0xef, 0xd9, 0x7c, 0x81, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Reward by index.
	Reward(ctx context.Context, in *QueryGetRewardRequest, opts ...grpc.CallOption) (*QueryGetRewardResponse, error)
	// Queries a list of Reward items.
	RewardAll(ctx context.Context, in *QueryAllRewardRequest, opts ...grpc.CallOption) (*QueryAllRewardResponse, error)
	// Queries a BuilderCount by index.
	BuilderCount(ctx context.Context, in *QueryGetBuilderCountRequest, opts ...grpc.CallOption) (*QueryGetBuilderCountResponse, error)
	// Queries a list of BuilderCount items.
	BuilderCountAll(ctx context.Context, in *QueryAllBuilderCountRequest, opts ...grpc.CallOption) (*QueryAllBuilderCountResponse, error)
	// Queries a BuilderList by id.
	BuilderList(ctx context.Context, in *QueryGetBuilderListRequest, opts ...grpc.CallOption) (*QueryGetBuilderListResponse, error)
	// Queries a list of BuilderList items.
	BuilderListAll(ctx context.Context, in *QueryAllBuilderListRequest, opts ...grpc.CallOption) (*QueryAllBuilderListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reward(ctx context.Context, in *QueryGetRewardRequest, opts ...grpc.CallOption) (*QueryGetRewardResponse, error) {
	out := new(QueryGetRewardResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/Reward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardAll(ctx context.Context, in *QueryAllRewardRequest, opts ...grpc.CallOption) (*QueryAllRewardResponse, error) {
	out := new(QueryAllRewardResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/RewardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderCount(ctx context.Context, in *QueryGetBuilderCountRequest, opts ...grpc.CallOption) (*QueryGetBuilderCountResponse, error) {
	out := new(QueryGetBuilderCountResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderCountAll(ctx context.Context, in *QueryAllBuilderCountRequest, opts ...grpc.CallOption) (*QueryAllBuilderCountResponse, error) {
	out := new(QueryAllBuilderCountResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderList(ctx context.Context, in *QueryGetBuilderListRequest, opts ...grpc.CallOption) (*QueryGetBuilderListResponse, error) {
	out := new(QueryGetBuilderListResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuilderListAll(ctx context.Context, in *QueryAllBuilderListRequest, opts ...grpc.CallOption) (*QueryAllBuilderListResponse, error) {
	out := new(QueryAllBuilderListResponse)
	err := c.cc.Invoke(ctx, "/shareledger.distributionx.v1.Query/BuilderListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Reward by index.
	Reward(context.Context, *QueryGetRewardRequest) (*QueryGetRewardResponse, error)
	// Queries a list of Reward items.
	RewardAll(context.Context, *QueryAllRewardRequest) (*QueryAllRewardResponse, error)
	// Queries a BuilderCount by index.
	BuilderCount(context.Context, *QueryGetBuilderCountRequest) (*QueryGetBuilderCountResponse, error)
	// Queries a list of BuilderCount items.
	BuilderCountAll(context.Context, *QueryAllBuilderCountRequest) (*QueryAllBuilderCountResponse, error)
	// Queries a BuilderList by id.
	BuilderList(context.Context, *QueryGetBuilderListRequest) (*QueryGetBuilderListResponse, error)
	// Queries a list of BuilderList items.
	BuilderListAll(context.Context, *QueryAllBuilderListRequest) (*QueryAllBuilderListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Reward(ctx context.Context, req *QueryGetRewardRequest) (*QueryGetRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (*UnimplementedQueryServer) RewardAll(ctx context.Context, req *QueryAllRewardRequest) (*QueryAllRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardAll not implemented")
}
func (*UnimplementedQueryServer) BuilderCount(ctx context.Context, req *QueryGetBuilderCountRequest) (*QueryGetBuilderCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderCount not implemented")
}
func (*UnimplementedQueryServer) BuilderCountAll(ctx context.Context, req *QueryAllBuilderCountRequest) (*QueryAllBuilderCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderCountAll not implemented")
}
func (*UnimplementedQueryServer) BuilderList(ctx context.Context, req *QueryGetBuilderListRequest) (*QueryGetBuilderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderList not implemented")
}
func (*UnimplementedQueryServer) BuilderListAll(ctx context.Context, req *QueryAllBuilderListRequest) (*QueryAllBuilderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderListAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/Reward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reward(ctx, req.(*QueryGetRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/RewardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardAll(ctx, req.(*QueryAllRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuilderCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderCount(ctx, req.(*QueryGetBuilderCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuilderCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderCountAll(ctx, req.(*QueryAllBuilderCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuilderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderList(ctx, req.(*QueryGetBuilderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuilderListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuilderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuilderListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.distributionx.v1.Query/BuilderListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuilderListAll(ctx, req.(*QueryAllBuilderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.distributionx.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _Query_Reward_Handler,
		},
		{
			MethodName: "RewardAll",
			Handler:    _Query_RewardAll_Handler,
		},
		{
			MethodName: "BuilderCount",
			Handler:    _Query_BuilderCount_Handler,
		},
		{
			MethodName: "BuilderCountAll",
			Handler:    _Query_BuilderCountAll_Handler,
		},
		{
			MethodName: "BuilderList",
			Handler:    _Query_BuilderList_Handler,
		},
		{
			MethodName: "BuilderListAll",
			Handler:    _Query_BuilderListAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/distributionx/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuilderCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuilderCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuilderCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuilderCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuilderCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuilderCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BuilderCount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBuilderCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuilderCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuilderCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBuilderCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuilderCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuilderCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BuilderCount) > 0 {
		for iNdEx := len(m.BuilderCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuilderCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuilderListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuilderListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuilderListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuilderListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuilderListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuilderListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BuilderList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBuilderListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuilderListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuilderListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBuilderListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuilderListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuilderListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BuilderList) > 0 {
		for iNdEx := len(m.BuilderList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuilderList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuilderCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuilderCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BuilderCount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBuilderCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBuilderCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuilderCount) > 0 {
		for _, e := range m.BuilderCount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuilderListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBuilderListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BuilderList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBuilderListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBuilderListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuilderList) > 0 {
		for _, e := range m.BuilderList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, Reward{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuilderCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuilderCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuilderCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuilderCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuilderCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuilderCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuilderCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuilderCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuilderCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuilderCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuilderCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuilderCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuilderCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuilderCount = append(m.BuilderCount, BuilderCount{})
			if err := m.BuilderCount[len(m.BuilderCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuilderListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuilderListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuilderListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuilderListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuilderListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuilderListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuilderList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuilderListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuilderListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuilderListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuilderListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuilderListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuilderListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuilderList = append(m.BuilderList, BuilderList{})
			if err := m.BuilderList[len(m.BuilderList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
