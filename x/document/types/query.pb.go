// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: document/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryDocumentByProofRequest struct {
	Proof string `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryDocumentByProofRequest) Reset()         { *m = QueryDocumentByProofRequest{} }
func (m *QueryDocumentByProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentByProofRequest) ProtoMessage()    {}
func (*QueryDocumentByProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f5760b19c0d3bb, []int{0}
}
func (m *QueryDocumentByProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentByProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentByProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentByProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentByProofRequest.Merge(m, src)
}
func (m *QueryDocumentByProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentByProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentByProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentByProofRequest proto.InternalMessageInfo

type QueryDocumentByProofResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
}

func (m *QueryDocumentByProofResponse) Reset()         { *m = QueryDocumentByProofResponse{} }
func (m *QueryDocumentByProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentByProofResponse) ProtoMessage()    {}
func (*QueryDocumentByProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f5760b19c0d3bb, []int{1}
}
func (m *QueryDocumentByProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentByProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentByProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentByProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentByProofResponse.Merge(m, src)
}
func (m *QueryDocumentByProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentByProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentByProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentByProofResponse proto.InternalMessageInfo

func (m *QueryDocumentByProofResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type QueryDocumentByHolderIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDocumentByHolderIdRequest) Reset()         { *m = QueryDocumentByHolderIdRequest{} }
func (m *QueryDocumentByHolderIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentByHolderIdRequest) ProtoMessage()    {}
func (*QueryDocumentByHolderIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f5760b19c0d3bb, []int{2}
}
func (m *QueryDocumentByHolderIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentByHolderIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentByHolderIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentByHolderIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentByHolderIdRequest.Merge(m, src)
}
func (m *QueryDocumentByHolderIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentByHolderIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentByHolderIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentByHolderIdRequest proto.InternalMessageInfo

type QueryDocumentByHolderIdResponse struct {
	Documents []*Document `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (m *QueryDocumentByHolderIdResponse) Reset()         { *m = QueryDocumentByHolderIdResponse{} }
func (m *QueryDocumentByHolderIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentByHolderIdResponse) ProtoMessage()    {}
func (*QueryDocumentByHolderIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f5760b19c0d3bb, []int{3}
}
func (m *QueryDocumentByHolderIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentByHolderIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentByHolderIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentByHolderIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentByHolderIdResponse.Merge(m, src)
}
func (m *QueryDocumentByHolderIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentByHolderIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentByHolderIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentByHolderIdResponse proto.InternalMessageInfo

func (m *QueryDocumentByHolderIdResponse) GetDocuments() []*Document {
	if m != nil {
		return m.Documents
	}
	return nil
}

type QueryDocumentOfHolderByIssuerRequest struct {
	Holder string `protobuf:"bytes,1,opt,name=holder,proto3" json:"holder,omitempty"`
	Issuer string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (m *QueryDocumentOfHolderByIssuerRequest) Reset()         { *m = QueryDocumentOfHolderByIssuerRequest{} }
func (m *QueryDocumentOfHolderByIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentOfHolderByIssuerRequest) ProtoMessage()    {}
func (*QueryDocumentOfHolderByIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f5760b19c0d3bb, []int{4}
}
func (m *QueryDocumentOfHolderByIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentOfHolderByIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentOfHolderByIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentOfHolderByIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentOfHolderByIssuerRequest.Merge(m, src)
}
func (m *QueryDocumentOfHolderByIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentOfHolderByIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentOfHolderByIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentOfHolderByIssuerRequest proto.InternalMessageInfo

type QueryDocumentOfHolderByIssuerResponse struct {
	Documents []*Document `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (m *QueryDocumentOfHolderByIssuerResponse) Reset()         { *m = QueryDocumentOfHolderByIssuerResponse{} }
func (m *QueryDocumentOfHolderByIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentOfHolderByIssuerResponse) ProtoMessage()    {}
func (*QueryDocumentOfHolderByIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f5760b19c0d3bb, []int{5}
}
func (m *QueryDocumentOfHolderByIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentOfHolderByIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentOfHolderByIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentOfHolderByIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentOfHolderByIssuerResponse.Merge(m, src)
}
func (m *QueryDocumentOfHolderByIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentOfHolderByIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentOfHolderByIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentOfHolderByIssuerResponse proto.InternalMessageInfo

func (m *QueryDocumentOfHolderByIssuerResponse) GetDocuments() []*Document {
	if m != nil {
		return m.Documents
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDocumentByProofRequest)(nil), "shareledger.document.QueryDocumentByProofRequest")
	proto.RegisterType((*QueryDocumentByProofResponse)(nil), "shareledger.document.QueryDocumentByProofResponse")
	proto.RegisterType((*QueryDocumentByHolderIdRequest)(nil), "shareledger.document.QueryDocumentByHolderIdRequest")
	proto.RegisterType((*QueryDocumentByHolderIdResponse)(nil), "shareledger.document.QueryDocumentByHolderIdResponse")
	proto.RegisterType((*QueryDocumentOfHolderByIssuerRequest)(nil), "shareledger.document.QueryDocumentOfHolderByIssuerRequest")
	proto.RegisterType((*QueryDocumentOfHolderByIssuerResponse)(nil), "shareledger.document.QueryDocumentOfHolderByIssuerResponse")
}

func init() { proto.RegisterFile("document/query.proto", fileDescriptor_d6f5760b19c0d3bb) }

var fileDescriptor_d6f5760b19c0d3bb = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0xef, 0x02, 0xad, 0x5a, 0x23, 0x81, 0x64, 0x45, 0x10, 0x1d, 0xd1, 0xa5, 0x3a, 0xa8,
	0xf8, 0x27, 0x9d, 0x95, 0x00, 0x4b, 0x80, 0x25, 0x62, 0xa0, 0x62, 0x00, 0x32, 0x76, 0x81, 0x4b,
	0xce, 0x75, 0x2c, 0x25, 0xf7, 0x5e, 0x6d, 0x1f, 0x22, 0x8a, 0xb2, 0x30, 0x31, 0x22, 0xb1, 0xa3,
	0x2e, 0x7c, 0x13, 0x06, 0xc6, 0x4a, 0x2c, 0x8c, 0x28, 0x61, 0xe0, 0x63, 0xa0, 0xb3, 0x7d, 0x69,
	0x1a, 0x12, 0x48, 0x11, 0x53, 0xec, 0xd7, 0xef, 0xf3, 0x3c, 0x3f, 0xc7, 0xaf, 0x0e, 0x95, 0x63,
	0xe8, 0x66, 0x03, 0x9a, 0x28, 0x72, 0x98, 0x51, 0x31, 0x0c, 0x53, 0x01, 0x0a, 0x70, 0x59, 0xf6,
	0x22, 0x41, 0xfb, 0x34, 0x66, 0x54, 0x84, 0x45, 0x87, 0x57, 0x65, 0x00, 0xac, 0x4f, 0x49, 0x94,
	0x72, 0x12, 0x25, 0x09, 0xa8, 0x48, 0x71, 0x48, 0xa4, 0xd1, 0x78, 0xb7, 0xbb, 0x20, 0x07, 0x20,
	0x49, 0x27, 0x92, 0xd4, 0x98, 0x91, 0xd7, 0xf5, 0x0e, 0x55, 0x51, 0x9d, 0xa4, 0x11, 0xe3, 0x89,
	0x6e, 0xb6, 0xbd, 0x65, 0x06, 0x0c, 0xf4, 0x92, 0xe4, 0x2b, 0x5b, 0xbd, 0x32, 0x63, 0x29, 0x16,
	0xe6, 0x20, 0x78, 0x84, 0xae, 0xbe, 0xc8, 0x0d, 0x1f, 0xdb, 0x72, 0x6b, 0xf8, 0x5c, 0x00, 0x1c,
	0xb4, 0xe9, 0x61, 0x46, 0xa5, 0xc2, 0x65, 0xb4, 0x91, 0xe6, 0xfb, 0x8a, 0xbb, 0xe3, 0xde, 0xdc,
	0x6e, 0x9b, 0x4d, 0x73, 0xeb, 0xdd, 0x51, 0xcd, 0xf9, 0x79, 0x54, 0x73, 0x82, 0x7d, 0x54, 0x5d,
	0x2e, 0x97, 0x29, 0x24, 0x92, 0xe2, 0x26, 0xda, 0x2a, 0x02, 0xb5, 0xc5, 0x85, 0x86, 0x1f, 0x2e,
	0xfb, 0x03, 0xc2, 0xc2, 0xa0, 0x3d, 0xeb, 0x0f, 0x9a, 0xc8, 0x5f, 0xf0, 0x7e, 0x02, 0xfd, 0x98,
	0x8a, 0xbd, 0xb8, 0xa0, 0xbb, 0x88, 0x4a, 0x3c, 0xb6, 0x68, 0x25, 0x1e, 0xcf, 0x71, 0xbd, 0x44,
	0xb5, 0x95, 0x5a, 0x8b, 0xf6, 0x10, 0x6d, 0x17, 0x51, 0xb2, 0xe2, 0xee, 0x9c, 0x5b, 0x83, 0xed,
	0x44, 0x10, 0xbc, 0x42, 0xd7, 0x4f, 0x05, 0x3c, 0x3b, 0x30, 0x01, 0xad, 0xe1, 0x9e, 0x94, 0x19,
	0x15, 0x05, 0xe2, 0x65, 0xb4, 0xd9, 0xd3, 0x07, 0x16, 0xd3, 0xee, 0xf2, 0x3a, 0xd7, 0x8d, 0x95,
	0x92, 0xa9, 0x9b, 0xdd, 0xdc, 0x15, 0x28, 0xda, 0xfd, 0x4b, 0xc2, 0xff, 0xb8, 0x48, 0xe3, 0xe3,
	0x79, 0xb4, 0xa1, 0x73, 0xf0, 0x27, 0x17, 0x5d, 0x5a, 0x78, 0x47, 0x5c, 0x5f, 0x6e, 0xf4, 0x87,
	0x91, 0xf1, 0x1a, 0x67, 0x91, 0x98, 0x2b, 0x04, 0x77, 0xde, 0x7e, 0xfd, 0xf1, 0xa1, 0xb4, 0x8b,
	0xaf, 0x91, 0x39, 0xed, 0x6c, 0x54, 0x89, 0x9e, 0x3a, 0x32, 0xd2, 0x3f, 0xe3, 0x9c, 0x13, 0xff,
	0xfe, 0xae, 0xf8, 0xde, 0x5a, 0xb9, 0x0b, 0x23, 0xe4, 0xdd, 0x3f, 0xa3, 0xca, 0x02, 0x07, 0x1a,
	0xb8, 0x8a, 0xbd, 0xe5, 0xc0, 0x23, 0x1e, 0x8f, 0xf1, 0x67, 0x17, 0x55, 0x56, 0x3d, 0x1e, 0x6e,
	0xae, 0x91, 0xbb, 0x62, 0xa6, 0xbc, 0x07, 0xff, 0xa4, 0xb5, 0xe4, 0x44, 0x93, 0xdf, 0xc2, 0x37,
	0x56, 0x90, 0x9b, 0xf9, 0x1c, 0x93, 0x91, 0x19, 0xc8, 0x71, 0xeb, 0xe9, 0x97, 0x89, 0xef, 0x1e,
	0x4f, 0x7c, 0xf7, 0xfb, 0xc4, 0x77, 0xdf, 0x4f, 0x7d, 0xe7, 0x78, 0xea, 0x3b, 0xdf, 0xa6, 0xbe,
	0xb3, 0x5f, 0x67, 0x5c, 0xf5, 0xb2, 0x4e, 0xd8, 0x85, 0x81, 0x31, 0x13, 0x3c, 0x61, 0xa7, 0x6c,
	0xdf, 0x9c, 0x18, 0xab, 0x61, 0x4a, 0x65, 0x67, 0x53, 0x7f, 0x75, 0xee, 0xfe, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x48, 0x53, 0x18, 0x1c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of documentByProof items.
	DocumentByProof(ctx context.Context, in *QueryDocumentByProofRequest, opts ...grpc.CallOption) (*QueryDocumentByProofResponse, error)
	// Queries a list of documentByHolderId items.
	DocumentByHolderId(ctx context.Context, in *QueryDocumentByHolderIdRequest, opts ...grpc.CallOption) (*QueryDocumentByHolderIdResponse, error)
	// Queries a list of documentOfHolderByIssuer items.
	DocumentOfHolderByIssuer(ctx context.Context, in *QueryDocumentOfHolderByIssuerRequest, opts ...grpc.CallOption) (*QueryDocumentOfHolderByIssuerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DocumentByProof(ctx context.Context, in *QueryDocumentByProofRequest, opts ...grpc.CallOption) (*QueryDocumentByProofResponse, error) {
	out := new(QueryDocumentByProofResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Query/DocumentByProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentByHolderId(ctx context.Context, in *QueryDocumentByHolderIdRequest, opts ...grpc.CallOption) (*QueryDocumentByHolderIdResponse, error) {
	out := new(QueryDocumentByHolderIdResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Query/DocumentByHolderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentOfHolderByIssuer(ctx context.Context, in *QueryDocumentOfHolderByIssuerRequest, opts ...grpc.CallOption) (*QueryDocumentOfHolderByIssuerResponse, error) {
	out := new(QueryDocumentOfHolderByIssuerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Query/DocumentOfHolderByIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of documentByProof items.
	DocumentByProof(context.Context, *QueryDocumentByProofRequest) (*QueryDocumentByProofResponse, error)
	// Queries a list of documentByHolderId items.
	DocumentByHolderId(context.Context, *QueryDocumentByHolderIdRequest) (*QueryDocumentByHolderIdResponse, error)
	// Queries a list of documentOfHolderByIssuer items.
	DocumentOfHolderByIssuer(context.Context, *QueryDocumentOfHolderByIssuerRequest) (*QueryDocumentOfHolderByIssuerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DocumentByProof(ctx context.Context, req *QueryDocumentByProofRequest) (*QueryDocumentByProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentByProof not implemented")
}
func (*UnimplementedQueryServer) DocumentByHolderId(ctx context.Context, req *QueryDocumentByHolderIdRequest) (*QueryDocumentByHolderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentByHolderId not implemented")
}
func (*UnimplementedQueryServer) DocumentOfHolderByIssuer(ctx context.Context, req *QueryDocumentOfHolderByIssuerRequest) (*QueryDocumentOfHolderByIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentOfHolderByIssuer not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DocumentByProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentByProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentByProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Query/DocumentByProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentByProof(ctx, req.(*QueryDocumentByProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentByHolderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentByHolderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentByHolderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Query/DocumentByHolderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentByHolderId(ctx, req.(*QueryDocumentByHolderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentOfHolderByIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentOfHolderByIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentOfHolderByIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Query/DocumentOfHolderByIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentOfHolderByIssuer(ctx, req.(*QueryDocumentOfHolderByIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.document.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DocumentByProof",
			Handler:    _Query_DocumentByProof_Handler,
		},
		{
			MethodName: "DocumentByHolderId",
			Handler:    _Query_DocumentByHolderId_Handler,
		},
		{
			MethodName: "DocumentOfHolderByIssuer",
			Handler:    _Query_DocumentOfHolderByIssuer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document/query.proto",
}

func (m *QueryDocumentByProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentByProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentByProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentByProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentByProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentByProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentByHolderIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentByHolderIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentByHolderIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentByHolderIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentByHolderIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentByHolderIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentOfHolderByIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentOfHolderByIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentOfHolderByIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Holder) > 0 {
		i -= len(m.Holder)
		copy(dAtA[i:], m.Holder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Holder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentOfHolderByIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentOfHolderByIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentOfHolderByIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDocumentByProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDocumentByProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDocumentByHolderIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDocumentByHolderIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDocumentOfHolderByIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Holder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDocumentOfHolderByIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDocumentByProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentByProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentByProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentByProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentByProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentByProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &Document{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentByHolderIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentByHolderIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentByHolderIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentByHolderIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentByHolderIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentByHolderIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, &Document{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentOfHolderByIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentOfHolderByIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentOfHolderByIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentOfHolderByIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentOfHolderByIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentOfHolderByIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, &Document{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
