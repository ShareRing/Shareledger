// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateDocument(ctx context.Context, in *MsgCreateDocument, opts ...grpc.CallOption) (*MsgCreateDocumentResponse, error)
	CreateDocuments(ctx context.Context, in *MsgCreateDocuments, opts ...grpc.CallOption) (*MsgCreateDocumentsResponse, error)
	RevokeDocument(ctx context.Context, in *MsgRevokeDocument, opts ...grpc.CallOption) (*MsgRevokeDocumentResponse, error)
	UpdateDocument(ctx context.Context, in *MsgUpdateDocument, opts ...grpc.CallOption) (*MsgUpdateDocumentResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDocument(ctx context.Context, in *MsgCreateDocument, opts ...grpc.CallOption) (*MsgCreateDocumentResponse, error) {
	out := new(MsgCreateDocumentResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Msg/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateDocuments(ctx context.Context, in *MsgCreateDocuments, opts ...grpc.CallOption) (*MsgCreateDocumentsResponse, error) {
	out := new(MsgCreateDocumentsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Msg/CreateDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeDocument(ctx context.Context, in *MsgRevokeDocument, opts ...grpc.CallOption) (*MsgRevokeDocumentResponse, error) {
	out := new(MsgRevokeDocumentResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Msg/RevokeDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDocument(ctx context.Context, in *MsgUpdateDocument, opts ...grpc.CallOption) (*MsgUpdateDocumentResponse, error) {
	out := new(MsgUpdateDocumentResponse)
	err := c.cc.Invoke(ctx, "/shareledger.document.Msg/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateDocument(context.Context, *MsgCreateDocument) (*MsgCreateDocumentResponse, error)
	CreateDocuments(context.Context, *MsgCreateDocuments) (*MsgCreateDocumentsResponse, error)
	RevokeDocument(context.Context, *MsgRevokeDocument) (*MsgRevokeDocumentResponse, error)
	UpdateDocument(context.Context, *MsgUpdateDocument) (*MsgUpdateDocumentResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateDocument(context.Context, *MsgCreateDocument) (*MsgCreateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedMsgServer) CreateDocuments(context.Context, *MsgCreateDocuments) (*MsgCreateDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocuments not implemented")
}
func (UnimplementedMsgServer) RevokeDocument(context.Context, *MsgRevokeDocument) (*MsgRevokeDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDocument not implemented")
}
func (UnimplementedMsgServer) UpdateDocument(context.Context, *MsgUpdateDocument) (*MsgUpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Msg/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDocument(ctx, req.(*MsgCreateDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDocuments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Msg/CreateDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDocuments(ctx, req.(*MsgCreateDocuments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Msg/RevokeDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeDocument(ctx, req.(*MsgRevokeDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.document.Msg/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDocument(ctx, req.(*MsgUpdateDocument))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.document.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _Msg_CreateDocument_Handler,
		},
		{
			MethodName: "CreateDocuments",
			Handler:    _Msg_CreateDocuments_Handler,
		},
		{
			MethodName: "RevokeDocument",
			Handler:    _Msg_RevokeDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _Msg_UpdateDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/document/v1/tx.proto",
}
