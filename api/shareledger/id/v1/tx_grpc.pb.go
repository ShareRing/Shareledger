// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateId(ctx context.Context, in *MsgCreateId, opts ...grpc.CallOption) (*MsgCreateIdResponse, error)
	CreateIds(ctx context.Context, in *MsgCreateIds, opts ...grpc.CallOption) (*MsgCreateIdsResponse, error)
	UpdateId(ctx context.Context, in *MsgUpdateId, opts ...grpc.CallOption) (*MsgUpdateIdResponse, error)
	ReplaceIdOwner(ctx context.Context, in *MsgReplaceIdOwner, opts ...grpc.CallOption) (*MsgReplaceIdOwnerResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateId(ctx context.Context, in *MsgCreateId, opts ...grpc.CallOption) (*MsgCreateIdResponse, error) {
	out := new(MsgCreateIdResponse)
	err := c.cc.Invoke(ctx, "/shareledger.id.Msg/CreateId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateIds(ctx context.Context, in *MsgCreateIds, opts ...grpc.CallOption) (*MsgCreateIdsResponse, error) {
	out := new(MsgCreateIdsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.id.Msg/CreateIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateId(ctx context.Context, in *MsgUpdateId, opts ...grpc.CallOption) (*MsgUpdateIdResponse, error) {
	out := new(MsgUpdateIdResponse)
	err := c.cc.Invoke(ctx, "/shareledger.id.Msg/UpdateId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceIdOwner(ctx context.Context, in *MsgReplaceIdOwner, opts ...grpc.CallOption) (*MsgReplaceIdOwnerResponse, error) {
	out := new(MsgReplaceIdOwnerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.id.Msg/ReplaceIdOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateId(context.Context, *MsgCreateId) (*MsgCreateIdResponse, error)
	CreateIds(context.Context, *MsgCreateIds) (*MsgCreateIdsResponse, error)
	UpdateId(context.Context, *MsgUpdateId) (*MsgUpdateIdResponse, error)
	ReplaceIdOwner(context.Context, *MsgReplaceIdOwner) (*MsgReplaceIdOwnerResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateId(context.Context, *MsgCreateId) (*MsgCreateIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateId not implemented")
}
func (UnimplementedMsgServer) CreateIds(context.Context, *MsgCreateIds) (*MsgCreateIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIds not implemented")
}
func (UnimplementedMsgServer) UpdateId(context.Context, *MsgUpdateId) (*MsgUpdateIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateId not implemented")
}
func (UnimplementedMsgServer) ReplaceIdOwner(context.Context, *MsgReplaceIdOwner) (*MsgReplaceIdOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceIdOwner not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.id.Msg/CreateId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateId(ctx, req.(*MsgCreateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.id.Msg/CreateIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIds(ctx, req.(*MsgCreateIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.id.Msg/UpdateId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateId(ctx, req.(*MsgUpdateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceIdOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceIdOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceIdOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.id.Msg/ReplaceIdOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceIdOwner(ctx, req.(*MsgReplaceIdOwner))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.id.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateId",
			Handler:    _Msg_CreateId_Handler,
		},
		{
			MethodName: "CreateIds",
			Handler:    _Msg_CreateIds_Handler,
		},
		{
			MethodName: "UpdateId",
			Handler:    _Msg_UpdateId_Handler,
		},
		{
			MethodName: "ReplaceIdOwner",
			Handler:    _Msg_ReplaceIdOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/id/v1/tx.proto",
}
