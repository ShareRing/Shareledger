syntax = "proto3";

package sharering.shareledger.distributionx;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "shareledger/distributionx/params.proto";
import "shareledger/distributionx/reward.proto";
import "shareledger/distributionx/builder_count.proto";
import "shareledger/distributionx/builder_list.proto";
// this line is used by starport scaffolding # 1


option go_package = "github.com/sharering/shareledger/x/distributionx/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sharering/shareledger/distributionx/params";
  }
  // Queries a Reward by index.
  rpc Reward(QueryGetRewardRequest) returns (QueryGetRewardResponse) {
    option (google.api.http).get = "/sharering/shareledger/distributionx/reward/{index}";
  }

  // Queries a list of Reward items.
  rpc RewardAll(QueryAllRewardRequest) returns (QueryAllRewardResponse) {
    option (google.api.http).get = "/sharering/shareledger/distributionx/reward";
  }

// Queries a BuilderCount by index.
	rpc BuilderCount(QueryGetBuilderCountRequest) returns (QueryGetBuilderCountResponse) {
		option (google.api.http).get = "/sharering/shareledger/distributionx/builder_count/{index}";
	}

	// Queries a list of BuilderCount items.
	rpc BuilderCountAll(QueryAllBuilderCountRequest) returns (QueryAllBuilderCountResponse) {
		option (google.api.http).get = "/sharering/shareledger/distributionx/builder_count";
	}

// Queries a BuilderList by id.
	rpc BuilderList(QueryGetBuilderListRequest) returns (QueryGetBuilderListResponse) {
		option (google.api.http).get = "/sharering/shareledger/distributionx/builder_list/{id}";
	}

	// Queries a list of BuilderList items.
	rpc BuilderListAll(QueryAllBuilderListRequest) returns (QueryAllBuilderListResponse) {
		option (google.api.http).get = "/sharering/shareledger/distributionx/builder_list";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetRewardRequest {
  string index = 1;
}

message QueryGetRewardResponse {
  Reward reward = 1 [(gogoproto.nullable) = false];
}

message QueryAllRewardRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRewardResponse {
  repeated Reward reward = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBuilderCountRequest {
	  string index = 1;

}

message QueryGetBuilderCountResponse {
	BuilderCount builderCount = 1 [(gogoproto.nullable) = false];
}

message QueryAllBuilderCountRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBuilderCountResponse {
	repeated BuilderCount builderCount = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBuilderListRequest {
	uint64 id = 1;
}

message QueryGetBuilderListResponse {
	BuilderList BuilderList = 1 [(gogoproto.nullable) = false];
}

message QueryAllBuilderListRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBuilderListResponse {
	repeated BuilderList BuilderList = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
