syntax = "proto3";

package shareledger.swap;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "shareledger/swap/batch.proto";
import "shareledger/swap/params.proto";
import "shareledger/swap/past_tx_event.proto";
import "shareledger/swap/request.proto";
import "shareledger/swap/schema.proto";
// this line is used by starport scaffolding # 1


option go_package = "github.com/sharering/shareledger/x/swap/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/params";
  }

  // Queries a list of Search items.
  rpc Swap(QuerySwapRequest) returns (QuerySwapResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/requests/{status}/{ids}/{srcAddr}/{destAddr}/{srcNetwork}/{destNetwork}";
  }

  // Queries a list of Fund items.
  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/balance";
  }

  // Queries a Format by index.
  rpc Schema(QuerySchemaRequest) returns (QuerySchemaResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/schemas/{network}";
  }

  // Queries a list of Format items.
  rpc Schemas(QuerySchemasRequest) returns (QuerySchemasResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/schemas";
  }

  // Queries a list of SearchBatch items.
  rpc Batches(QueryBatchesRequest) returns (QueryBatchesResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/batches";
  }

  // Queries a list of PastTxEvent items.
  rpc PastTxEvent(QueryPastTxEventRequest) returns (QueryPastTxEventResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/past_tx_events/{txHash}/{logIndex}";
  }

  // Queries a list of PastTxEvents by txHash items.
  rpc PastTxEventsByTxHash(QueryPastTxEventsByTxHashRequest) returns (QueryPastTxEventsByTxHashResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/past_tx_events/{txHash}";
  }

  // Queries all PastTxEvents
  rpc PastTxEvents(QueryPastTxEventsRequest) returns (QueryPastTxEventsResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/past_tx_events";
  }

  // Queries a list of NextRequestId items.
  rpc NextRequestId(QueryNextRequestIdRequest) returns (QueryNextRequestIdResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/next_request_id";
  }

  // Queries a list of NextBatchId items.
  rpc NextBatchId(QueryNextBatchIdRequest) returns (QueryNextBatchIdResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/next_batch_id";
  }

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QuerySwapRequest {
  string status = 1;
  repeated uint64 ids = 2;
  string srcAddr = 3;
  string destAddr = 4;
  string srcNetwork = 5;
  string destNetwork = 6;
  cosmos.base.query.v1beta1.PageRequest pagination = 7;
}

message QuerySwapResponse {
  repeated Request swaps = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBatchesResponse {
  repeated Batch batches = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBalanceRequest {}

message QueryBalanceResponse {
  cosmos.base.v1beta1.Coin balance = 1;
}

message QuerySchemaRequest {
  string network = 1;
}

message QuerySchemaResponse {
  Schema schema = 1 [(gogoproto.nullable) = false];
}

message QuerySchemasRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySchemasResponse {
  repeated Schema schemas = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBatchesRequest {
  string network = 2;
  repeated uint64 ids = 3;
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

message QueryPastTxEventRequest {
  string txHash = 1;
  uint64 logIndex = 2;
}

message QueryPastTxEventResponse {
  PastTxEvent event = 1;
}

message QueryPastTxEventsByTxHashRequest {
  string txHash = 1;
}

message QueryPastTxEventsByTxHashResponse {
  repeated PastTxEvent events = 1;
}

message QueryPastTxEventsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPastTxEventsResponse {
  repeated PastTxEvent events = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNextRequestIdRequest {}

message QueryNextRequestIdResponse {
  uint64 nextCount = 1;
}

message QueryNextBatchIdRequest {}

message QueryNextBatchIdResponse {
  uint64 nextCount = 1;
}

// this line is used by starport scaffolding # 3
