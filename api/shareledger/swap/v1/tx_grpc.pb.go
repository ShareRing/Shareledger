// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	RequestOut(ctx context.Context, in *MsgRequestOut, opts ...grpc.CallOption) (*MsgRequestOutResponse, error)
	ApproveOut(ctx context.Context, in *MsgApproveOut, opts ...grpc.CallOption) (*MsgApproveOutResponse, error)
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	CreateSchema(ctx context.Context, in *MsgCreateSchema, opts ...grpc.CallOption) (*MsgCreateSchemaResponse, error)
	UpdateSchema(ctx context.Context, in *MsgUpdateSchema, opts ...grpc.CallOption) (*MsgUpdateSchemaResponse, error)
	DeleteSchema(ctx context.Context, in *MsgDeleteSchema, opts ...grpc.CallOption) (*MsgDeleteSchemaResponse, error)
	Cancel(ctx context.Context, in *MsgCancel, opts ...grpc.CallOption) (*MsgCancelResponse, error)
	Reject(ctx context.Context, in *MsgReject, opts ...grpc.CallOption) (*MsgRejectResponse, error)
	RequestIn(ctx context.Context, in *MsgRequestIn, opts ...grpc.CallOption) (*MsgRequestInResponse, error)
	ApproveIn(ctx context.Context, in *MsgApproveIn, opts ...grpc.CallOption) (*MsgApproveInResponse, error)
	CompleteBatch(ctx context.Context, in *MsgCompleteBatch, opts ...grpc.CallOption) (*MsgCompleteBatchResponse, error)
	UpdateSwapFee(ctx context.Context, in *MsgUpdateSwapFee, opts ...grpc.CallOption) (*MsgUpdateSwapFeeResponse, error)
	CancelBatches(ctx context.Context, in *MsgCancelBatches, opts ...grpc.CallOption) (*MsgCancelBatchesResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RequestOut(ctx context.Context, in *MsgRequestOut, opts ...grpc.CallOption) (*MsgRequestOutResponse, error) {
	out := new(MsgRequestOutResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/RequestOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveOut(ctx context.Context, in *MsgApproveOut, opts ...grpc.CallOption) (*MsgApproveOutResponse, error) {
	out := new(MsgApproveOutResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/ApproveOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSchema(ctx context.Context, in *MsgCreateSchema, opts ...grpc.CallOption) (*MsgCreateSchemaResponse, error) {
	out := new(MsgCreateSchemaResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/CreateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSchema(ctx context.Context, in *MsgUpdateSchema, opts ...grpc.CallOption) (*MsgUpdateSchemaResponse, error) {
	out := new(MsgUpdateSchemaResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/UpdateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSchema(ctx context.Context, in *MsgDeleteSchema, opts ...grpc.CallOption) (*MsgDeleteSchemaResponse, error) {
	out := new(MsgDeleteSchemaResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/DeleteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Cancel(ctx context.Context, in *MsgCancel, opts ...grpc.CallOption) (*MsgCancelResponse, error) {
	out := new(MsgCancelResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Reject(ctx context.Context, in *MsgReject, opts ...grpc.CallOption) (*MsgRejectResponse, error) {
	out := new(MsgRejectResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/Reject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestIn(ctx context.Context, in *MsgRequestIn, opts ...grpc.CallOption) (*MsgRequestInResponse, error) {
	out := new(MsgRequestInResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/RequestIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveIn(ctx context.Context, in *MsgApproveIn, opts ...grpc.CallOption) (*MsgApproveInResponse, error) {
	out := new(MsgApproveInResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/ApproveIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteBatch(ctx context.Context, in *MsgCompleteBatch, opts ...grpc.CallOption) (*MsgCompleteBatchResponse, error) {
	out := new(MsgCompleteBatchResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/CompleteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSwapFee(ctx context.Context, in *MsgUpdateSwapFee, opts ...grpc.CallOption) (*MsgUpdateSwapFeeResponse, error) {
	out := new(MsgUpdateSwapFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/UpdateSwapFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelBatches(ctx context.Context, in *MsgCancelBatches, opts ...grpc.CallOption) (*MsgCancelBatchesResponse, error) {
	out := new(MsgCancelBatchesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Msg/CancelBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	RequestOut(context.Context, *MsgRequestOut) (*MsgRequestOutResponse, error)
	ApproveOut(context.Context, *MsgApproveOut) (*MsgApproveOutResponse, error)
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	CreateSchema(context.Context, *MsgCreateSchema) (*MsgCreateSchemaResponse, error)
	UpdateSchema(context.Context, *MsgUpdateSchema) (*MsgUpdateSchemaResponse, error)
	DeleteSchema(context.Context, *MsgDeleteSchema) (*MsgDeleteSchemaResponse, error)
	Cancel(context.Context, *MsgCancel) (*MsgCancelResponse, error)
	Reject(context.Context, *MsgReject) (*MsgRejectResponse, error)
	RequestIn(context.Context, *MsgRequestIn) (*MsgRequestInResponse, error)
	ApproveIn(context.Context, *MsgApproveIn) (*MsgApproveInResponse, error)
	CompleteBatch(context.Context, *MsgCompleteBatch) (*MsgCompleteBatchResponse, error)
	UpdateSwapFee(context.Context, *MsgUpdateSwapFee) (*MsgUpdateSwapFeeResponse, error)
	CancelBatches(context.Context, *MsgCancelBatches) (*MsgCancelBatchesResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) RequestOut(context.Context, *MsgRequestOut) (*MsgRequestOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOut not implemented")
}
func (UnimplementedMsgServer) ApproveOut(context.Context, *MsgApproveOut) (*MsgApproveOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOut not implemented")
}
func (UnimplementedMsgServer) Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedMsgServer) Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedMsgServer) CreateSchema(context.Context, *MsgCreateSchema) (*MsgCreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedMsgServer) UpdateSchema(context.Context, *MsgUpdateSchema) (*MsgUpdateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}
func (UnimplementedMsgServer) DeleteSchema(context.Context, *MsgDeleteSchema) (*MsgDeleteSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (UnimplementedMsgServer) Cancel(context.Context, *MsgCancel) (*MsgCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedMsgServer) Reject(context.Context, *MsgReject) (*MsgRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedMsgServer) RequestIn(context.Context, *MsgRequestIn) (*MsgRequestInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestIn not implemented")
}
func (UnimplementedMsgServer) ApproveIn(context.Context, *MsgApproveIn) (*MsgApproveInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveIn not implemented")
}
func (UnimplementedMsgServer) CompleteBatch(context.Context, *MsgCompleteBatch) (*MsgCompleteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteBatch not implemented")
}
func (UnimplementedMsgServer) UpdateSwapFee(context.Context, *MsgUpdateSwapFee) (*MsgUpdateSwapFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwapFee not implemented")
}
func (UnimplementedMsgServer) CancelBatches(context.Context, *MsgCancelBatches) (*MsgCancelBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBatches not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RequestOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/RequestOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestOut(ctx, req.(*MsgRequestOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/ApproveOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveOut(ctx, req.(*MsgApproveOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/CreateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSchema(ctx, req.(*MsgCreateSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/UpdateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSchema(ctx, req.(*MsgUpdateSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/DeleteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSchema(ctx, req.(*MsgDeleteSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Cancel(ctx, req.(*MsgCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/Reject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Reject(ctx, req.(*MsgReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/RequestIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestIn(ctx, req.(*MsgRequestIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/ApproveIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveIn(ctx, req.(*MsgApproveIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/CompleteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteBatch(ctx, req.(*MsgCompleteBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSwapFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSwapFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSwapFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/UpdateSwapFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSwapFee(ctx, req.(*MsgUpdateSwapFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelBatches)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Msg/CancelBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelBatches(ctx, req.(*MsgCancelBatches))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.swap.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOut",
			Handler:    _Msg_RequestOut_Handler,
		},
		{
			MethodName: "ApproveOut",
			Handler:    _Msg_ApproveOut_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "CreateSchema",
			Handler:    _Msg_CreateSchema_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _Msg_UpdateSchema_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _Msg_DeleteSchema_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Msg_Cancel_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _Msg_Reject_Handler,
		},
		{
			MethodName: "RequestIn",
			Handler:    _Msg_RequestIn_Handler,
		},
		{
			MethodName: "ApproveIn",
			Handler:    _Msg_ApproveIn_Handler,
		},
		{
			MethodName: "CompleteBatch",
			Handler:    _Msg_CompleteBatch_Handler,
		},
		{
			MethodName: "UpdateSwapFee",
			Handler:    _Msg_UpdateSwapFee_Handler,
		},
		{
			MethodName: "CancelBatches",
			Handler:    _Msg_CancelBatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/swap/v1/tx.proto",
}
