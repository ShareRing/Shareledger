// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gentlemint/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryExchangeRateRequest struct {
}

func (m *QueryExchangeRateRequest) Reset()         { *m = QueryExchangeRateRequest{} }
func (m *QueryExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateRequest) ProtoMessage()    {}
func (*QueryExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{0}
}
func (m *QueryExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateRequest.Merge(m, src)
}
func (m *QueryExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateRequest proto.InternalMessageInfo

type QueryExchangeRateResponse struct {
	Rate string `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *QueryExchangeRateResponse) Reset()         { *m = QueryExchangeRateResponse{} }
func (m *QueryExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateResponse) ProtoMessage()    {}
func (*QueryExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{1}
}
func (m *QueryExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateResponse.Merge(m, src)
}
func (m *QueryExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateResponse proto.InternalMessageInfo

func (m *QueryExchangeRateResponse) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

type QueryGetLevelFeeRequest struct {
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *QueryGetLevelFeeRequest) Reset()         { *m = QueryGetLevelFeeRequest{} }
func (m *QueryGetLevelFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLevelFeeRequest) ProtoMessage()    {}
func (*QueryGetLevelFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{2}
}
func (m *QueryGetLevelFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLevelFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLevelFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLevelFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLevelFeeRequest.Merge(m, src)
}
func (m *QueryGetLevelFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLevelFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLevelFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLevelFeeRequest proto.InternalMessageInfo

func (m *QueryGetLevelFeeRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type QueryGetLevelFeeResponse struct {
	LevelFee LevelFee `protobuf:"bytes,1,opt,name=levelFee,proto3" json:"levelFee"`
}

func (m *QueryGetLevelFeeResponse) Reset()         { *m = QueryGetLevelFeeResponse{} }
func (m *QueryGetLevelFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLevelFeeResponse) ProtoMessage()    {}
func (*QueryGetLevelFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{3}
}
func (m *QueryGetLevelFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLevelFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLevelFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLevelFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLevelFeeResponse.Merge(m, src)
}
func (m *QueryGetLevelFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLevelFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLevelFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLevelFeeResponse proto.InternalMessageInfo

func (m *QueryGetLevelFeeResponse) GetLevelFee() LevelFee {
	if m != nil {
		return m.LevelFee
	}
	return LevelFee{}
}

type QueryAllLevelFeeRequest struct {
}

func (m *QueryAllLevelFeeRequest) Reset()         { *m = QueryAllLevelFeeRequest{} }
func (m *QueryAllLevelFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLevelFeeRequest) ProtoMessage()    {}
func (*QueryAllLevelFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{4}
}
func (m *QueryAllLevelFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLevelFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLevelFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLevelFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLevelFeeRequest.Merge(m, src)
}
func (m *QueryAllLevelFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLevelFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLevelFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLevelFeeRequest proto.InternalMessageInfo

type QueryAllLevelFeeResponse struct {
	LevelFee []LevelFee `protobuf:"bytes,1,rep,name=levelFee,proto3" json:"levelFee"`
}

func (m *QueryAllLevelFeeResponse) Reset()         { *m = QueryAllLevelFeeResponse{} }
func (m *QueryAllLevelFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLevelFeeResponse) ProtoMessage()    {}
func (*QueryAllLevelFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{5}
}
func (m *QueryAllLevelFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLevelFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLevelFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLevelFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLevelFeeResponse.Merge(m, src)
}
func (m *QueryAllLevelFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLevelFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLevelFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLevelFeeResponse proto.InternalMessageInfo

func (m *QueryAllLevelFeeResponse) GetLevelFee() []LevelFee {
	if m != nil {
		return m.LevelFee
	}
	return nil
}

type QueryGetActionLevelFeeRequest struct {
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *QueryGetActionLevelFeeRequest) Reset()         { *m = QueryGetActionLevelFeeRequest{} }
func (m *QueryGetActionLevelFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionLevelFeeRequest) ProtoMessage()    {}
func (*QueryGetActionLevelFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{6}
}
func (m *QueryGetActionLevelFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionLevelFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionLevelFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionLevelFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionLevelFeeRequest.Merge(m, src)
}
func (m *QueryGetActionLevelFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionLevelFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionLevelFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionLevelFeeRequest proto.InternalMessageInfo

func (m *QueryGetActionLevelFeeRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type QueryGetActionLevelFeeResponse struct {
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Level  string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	Fee    string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryGetActionLevelFeeResponse) Reset()         { *m = QueryGetActionLevelFeeResponse{} }
func (m *QueryGetActionLevelFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionLevelFeeResponse) ProtoMessage()    {}
func (*QueryGetActionLevelFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{7}
}
func (m *QueryGetActionLevelFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionLevelFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionLevelFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionLevelFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionLevelFeeResponse.Merge(m, src)
}
func (m *QueryGetActionLevelFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionLevelFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionLevelFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionLevelFeeResponse proto.InternalMessageInfo

func (m *QueryGetActionLevelFeeResponse) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *QueryGetActionLevelFeeResponse) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *QueryGetActionLevelFeeResponse) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

type QueryAllActionLevelFeeRequest struct {
}

func (m *QueryAllActionLevelFeeRequest) Reset()         { *m = QueryAllActionLevelFeeRequest{} }
func (m *QueryAllActionLevelFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionLevelFeeRequest) ProtoMessage()    {}
func (*QueryAllActionLevelFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{8}
}
func (m *QueryAllActionLevelFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionLevelFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionLevelFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionLevelFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionLevelFeeRequest.Merge(m, src)
}
func (m *QueryAllActionLevelFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionLevelFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionLevelFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionLevelFeeRequest proto.InternalMessageInfo

type QueryAllActionLevelFeeResponse struct {
	ActionLevelFee []ActionLevelFee `protobuf:"bytes,1,rep,name=actionLevelFee,proto3" json:"actionLevelFee"`
}

func (m *QueryAllActionLevelFeeResponse) Reset()         { *m = QueryAllActionLevelFeeResponse{} }
func (m *QueryAllActionLevelFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionLevelFeeResponse) ProtoMessage()    {}
func (*QueryAllActionLevelFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c3912bb3197ea16, []int{9}
}
func (m *QueryAllActionLevelFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionLevelFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionLevelFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionLevelFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionLevelFeeResponse.Merge(m, src)
}
func (m *QueryAllActionLevelFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionLevelFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionLevelFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionLevelFeeResponse proto.InternalMessageInfo

func (m *QueryAllActionLevelFeeResponse) GetActionLevelFee() []ActionLevelFee {
	if m != nil {
		return m.ActionLevelFee
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryExchangeRateRequest)(nil), "shareledger.gentlemint.QueryExchangeRateRequest")
	proto.RegisterType((*QueryExchangeRateResponse)(nil), "shareledger.gentlemint.QueryExchangeRateResponse")
	proto.RegisterType((*QueryGetLevelFeeRequest)(nil), "shareledger.gentlemint.QueryGetLevelFeeRequest")
	proto.RegisterType((*QueryGetLevelFeeResponse)(nil), "shareledger.gentlemint.QueryGetLevelFeeResponse")
	proto.RegisterType((*QueryAllLevelFeeRequest)(nil), "shareledger.gentlemint.QueryAllLevelFeeRequest")
	proto.RegisterType((*QueryAllLevelFeeResponse)(nil), "shareledger.gentlemint.QueryAllLevelFeeResponse")
	proto.RegisterType((*QueryGetActionLevelFeeRequest)(nil), "shareledger.gentlemint.QueryGetActionLevelFeeRequest")
	proto.RegisterType((*QueryGetActionLevelFeeResponse)(nil), "shareledger.gentlemint.QueryGetActionLevelFeeResponse")
	proto.RegisterType((*QueryAllActionLevelFeeRequest)(nil), "shareledger.gentlemint.QueryAllActionLevelFeeRequest")
	proto.RegisterType((*QueryAllActionLevelFeeResponse)(nil), "shareledger.gentlemint.QueryAllActionLevelFeeResponse")
}

func init() { proto.RegisterFile("gentlemint/query.proto", fileDescriptor_4c3912bb3197ea16) }

var fileDescriptor_4c3912bb3197ea16 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xa6, 0x2d, 0x65, 0x8b, 0x2a, 0x58, 0x55, 0x21, 0xb5, 0xc0, 0x2d, 0x2b, 0x54,
	0xa1, 0xaa, 0xca, 0x26, 0x29, 0xe5, 0xef, 0x29, 0x91, 0x80, 0x0b, 0x1c, 0x88, 0x38, 0x71, 0x20,
	0x6c, 0xc2, 0xd4, 0xb1, 0xb4, 0xf1, 0xa6, 0xf6, 0x26, 0x6a, 0x55, 0xf5, 0xd2, 0x27, 0x40, 0xe2,
	0x09, 0x90, 0xb8, 0xf0, 0x0e, 0x9c, 0x38, 0xf5, 0x58, 0x89, 0x0b, 0x27, 0x84, 0x12, 0x1e, 0x04,
	0x79, 0xbd, 0x6e, 0xed, 0xd4, 0x6e, 0x9a, 0xde, 0xd6, 0x3b, 0xf3, 0xcd, 0xfc, 0xf6, 0xdb, 0x59,
	0x19, 0x15, 0x6c, 0x70, 0x25, 0x87, 0xae, 0xe3, 0x4a, 0xba, 0xdb, 0x07, 0x6f, 0xbf, 0xd4, 0xf3,
	0x84, 0x14, 0xb8, 0xe0, 0x77, 0x98, 0x07, 0x1c, 0x3e, 0xd9, 0xe0, 0x95, 0xce, 0x72, 0xcc, 0x3b,
	0xb6, 0x10, 0x36, 0x07, 0xca, 0x7a, 0x0e, 0x65, 0xae, 0x2b, 0x24, 0x93, 0x8e, 0x70, 0xfd, 0x50,
	0x65, 0x6e, 0xb4, 0x85, 0xdf, 0x15, 0x3e, 0x6d, 0x31, 0x1f, 0xc2, 0x72, 0x74, 0x50, 0x69, 0x81,
	0x64, 0x15, 0xda, 0x63, 0xb6, 0xe3, 0xaa, 0x64, 0x9d, 0x6b, 0xc5, 0x3a, 0xc3, 0x5e, 0xbb, 0xc3,
	0x5c, 0x1b, 0x9a, 0x1e, 0x93, 0xa0, 0xe3, 0x66, 0x2c, 0xce, 0x61, 0x00, 0xbc, 0xb9, 0x03, 0x51,
	0xec, 0x5e, 0x2c, 0xc6, 0xda, 0x41, 0xd1, 0xe6, 0x78, 0xca, 0xb2, 0x2d, 0x6c, 0xa1, 0x96, 0x34,
	0x58, 0x85, 0xbb, 0xc4, 0x44, 0xc5, 0xb7, 0x01, 0xd6, 0x0b, 0xdd, 0xb0, 0xc1, 0x24, 0x34, 0x60,
	0xb7, 0x0f, 0xbe, 0x24, 0x14, 0xad, 0xa4, 0xc4, 0xfc, 0x9e, 0x70, 0x7d, 0xc0, 0x18, 0xcd, 0x06,
	0x6c, 0x45, 0x63, 0xcd, 0x78, 0x70, 0xbd, 0xa1, 0xd6, 0x84, 0xa2, 0xdb, 0x4a, 0xf0, 0x0a, 0xe4,
	0xeb, 0xa0, 0xfb, 0x4b, 0x88, 0x6a, 0xe1, 0x65, 0x34, 0xa7, 0x80, 0x74, 0x7e, 0xf8, 0x41, 0x3e,
	0xe8, 0xee, 0x09, 0x81, 0x6e, 0x50, 0x47, 0x0b, 0x5c, 0xef, 0x29, 0xd1, 0x62, 0x75, 0xad, 0x94,
	0x7e, 0x07, 0xa5, 0x48, 0x5b, 0x9f, 0x3d, 0xfe, 0xb3, 0x9a, 0x6b, 0x9c, 0xea, 0xc8, 0x8a, 0x06,
	0xaa, 0x71, 0x3e, 0x06, 0x74, 0xda, 0x3a, 0x11, 0x4a, 0x6d, 0x9d, 0xbf, 0x52, 0xeb, 0xc7, 0xe8,
	0x6e, 0x74, 0xb4, 0x9a, 0xba, 0x90, 0x71, 0x47, 0x0a, 0x68, 0x3e, 0xbc, 0x29, 0x6d, 0x89, 0xfe,
	0x22, 0x1f, 0x91, 0x95, 0x25, 0xd4, 0x78, 0x19, 0xca, 0x33, 0x8f, 0x67, 0x62, 0x1e, 0xe3, 0x9b,
	0x28, 0xbf, 0x03, 0x50, 0xcc, 0xab, 0xbd, 0x60, 0x49, 0x56, 0x35, 0x5a, 0x8d, 0xf3, 0x54, 0x34,
	0x32, 0xd0, 0x08, 0x29, 0x09, 0x1a, 0xe1, 0x1d, 0x5a, 0x62, 0x89, 0x88, 0xf6, 0x69, 0x3d, 0xcb,
	0xa7, 0x64, 0x1d, 0xed, 0xd6, 0x58, 0x8d, 0xea, 0xd1, 0x35, 0x34, 0xa7, 0x1a, 0xe3, 0xaf, 0x06,
	0xba, 0x11, 0x1f, 0x3b, 0x5c, 0xce, 0x2a, 0x9c, 0x35, 0xbd, 0x66, 0x65, 0x0a, 0x45, 0x78, 0x2a,
	0xb2, 0x79, 0xf4, 0xeb, 0xdf, 0x97, 0x99, 0x75, 0x7c, 0x9f, 0xc6, 0xa4, 0x34, 0xe5, 0x59, 0x2a,
	0xa4, 0xef, 0x06, 0x5a, 0x88, 0xd0, 0x31, 0xbd, 0xb0, 0xdb, 0xf9, 0x07, 0x61, 0x96, 0x2f, 0x2f,
	0xd0, 0x74, 0xcf, 0x14, 0xdd, 0x43, 0x5c, 0x0d, 0xe9, 0x3c, 0xc7, 0xb5, 0xb3, 0x38, 0xa3, 0x29,
	0xa4, 0x07, 0x6a, 0x75, 0x88, 0xbf, 0x19, 0x68, 0x31, 0x2a, 0x58, 0xe3, 0x7c, 0x02, 0xee, 0xf9,
	0xe7, 0x32, 0x01, 0x37, 0xe5, 0x11, 0x91, 0xaa, 0xc2, 0xdd, 0xc4, 0x1b, 0x97, 0xc7, 0xc5, 0x3f,
	0x0d, 0xb4, 0x94, 0x9c, 0x14, 0xbc, 0x3d, 0xc9, 0xa7, 0xd4, 0x11, 0x36, 0x1f, 0x4d, 0x2b, 0xd3,
	0xd4, 0x35, 0x45, 0xfd, 0x1c, 0x3f, 0x9d, 0x4c, 0x9d, 0x1c, 0x5e, 0x7a, 0x10, 0x7e, 0x1f, 0xe2,
	0x1f, 0x06, 0xba, 0x95, 0xac, 0x1e, 0x38, 0xbe, 0x3d, 0xc9, 0xc0, 0xab, 0x9c, 0x23, 0xf3, 0x81,
	0x92, 0x27, 0xea, 0x1c, 0x55, 0x5c, 0x9e, 0xf6, 0x1c, 0xf5, 0x37, 0xc7, 0x43, 0xcb, 0x38, 0x19,
	0x5a, 0xc6, 0xdf, 0xa1, 0x65, 0x7c, 0x1e, 0x59, 0xb9, 0x93, 0x91, 0x95, 0xfb, 0x3d, 0xb2, 0x72,
	0xef, 0xb7, 0x6c, 0x47, 0x76, 0xfa, 0xad, 0x52, 0x5b, 0x74, 0x33, 0xaa, 0xee, 0xc5, 0xeb, 0xca,
	0xfd, 0x1e, 0xf8, 0xad, 0x79, 0xf5, 0x9f, 0xd9, 0xfa, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xc7,
	0x38, 0xb5, 0x58, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a exchangeRate by index.
	ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// Queries a levelFee by index.
	LevelFee(ctx context.Context, in *QueryGetLevelFeeRequest, opts ...grpc.CallOption) (*QueryGetLevelFeeResponse, error)
	// Queries a list of levelFee items.
	LevelFeeAll(ctx context.Context, in *QueryAllLevelFeeRequest, opts ...grpc.CallOption) (*QueryAllLevelFeeResponse, error)
	// Queries a actionLevelFee by index.
	ActionLevelFee(ctx context.Context, in *QueryGetActionLevelFeeRequest, opts ...grpc.CallOption) (*QueryGetActionLevelFeeResponse, error)
	// Queries a list of actionLevelFee items.
	ActionLevelFeeAll(ctx context.Context, in *QueryAllActionLevelFeeRequest, opts ...grpc.CallOption) (*QueryAllActionLevelFeeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LevelFee(ctx context.Context, in *QueryGetLevelFeeRequest, opts ...grpc.CallOption) (*QueryGetLevelFeeResponse, error) {
	out := new(QueryGetLevelFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/LevelFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LevelFeeAll(ctx context.Context, in *QueryAllLevelFeeRequest, opts ...grpc.CallOption) (*QueryAllLevelFeeResponse, error) {
	out := new(QueryAllLevelFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/LevelFeeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionLevelFee(ctx context.Context, in *QueryGetActionLevelFeeRequest, opts ...grpc.CallOption) (*QueryGetActionLevelFeeResponse, error) {
	out := new(QueryGetActionLevelFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/ActionLevelFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionLevelFeeAll(ctx context.Context, in *QueryAllActionLevelFeeRequest, opts ...grpc.CallOption) (*QueryAllActionLevelFeeResponse, error) {
	out := new(QueryAllActionLevelFeeResponse)
	err := c.cc.Invoke(ctx, "/shareledger.gentlemint.Query/ActionLevelFeeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a exchangeRate by index.
	ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// Queries a levelFee by index.
	LevelFee(context.Context, *QueryGetLevelFeeRequest) (*QueryGetLevelFeeResponse, error)
	// Queries a list of levelFee items.
	LevelFeeAll(context.Context, *QueryAllLevelFeeRequest) (*QueryAllLevelFeeResponse, error)
	// Queries a actionLevelFee by index.
	ActionLevelFee(context.Context, *QueryGetActionLevelFeeRequest) (*QueryGetActionLevelFeeResponse, error)
	// Queries a list of actionLevelFee items.
	ActionLevelFeeAll(context.Context, *QueryAllActionLevelFeeRequest) (*QueryAllActionLevelFeeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ExchangeRate(ctx context.Context, req *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (*UnimplementedQueryServer) LevelFee(ctx context.Context, req *QueryGetLevelFeeRequest) (*QueryGetLevelFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelFee not implemented")
}
func (*UnimplementedQueryServer) LevelFeeAll(ctx context.Context, req *QueryAllLevelFeeRequest) (*QueryAllLevelFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelFeeAll not implemented")
}
func (*UnimplementedQueryServer) ActionLevelFee(ctx context.Context, req *QueryGetActionLevelFeeRequest) (*QueryGetActionLevelFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionLevelFee not implemented")
}
func (*UnimplementedQueryServer) ActionLevelFeeAll(ctx context.Context, req *QueryAllActionLevelFeeRequest) (*QueryAllActionLevelFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionLevelFeeAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LevelFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLevelFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LevelFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/LevelFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LevelFee(ctx, req.(*QueryGetLevelFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LevelFeeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLevelFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LevelFeeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/LevelFeeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LevelFeeAll(ctx, req.(*QueryAllLevelFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionLevelFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionLevelFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionLevelFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/ActionLevelFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionLevelFee(ctx, req.(*QueryGetActionLevelFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionLevelFeeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionLevelFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionLevelFeeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.gentlemint.Query/ActionLevelFeeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionLevelFeeAll(ctx, req.(*QueryAllActionLevelFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.gentlemint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "LevelFee",
			Handler:    _Query_LevelFee_Handler,
		},
		{
			MethodName: "LevelFeeAll",
			Handler:    _Query_LevelFeeAll_Handler,
		},
		{
			MethodName: "ActionLevelFee",
			Handler:    _Query_ActionLevelFee_Handler,
		},
		{
			MethodName: "ActionLevelFeeAll",
			Handler:    _Query_ActionLevelFeeAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gentlemint/query.proto",
}

func (m *QueryExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rate) > 0 {
		i -= len(m.Rate)
		copy(dAtA[i:], m.Rate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Rate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLevelFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLevelFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLevelFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLevelFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLevelFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLevelFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LevelFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLevelFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLevelFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLevelFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllLevelFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLevelFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLevelFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LevelFee) > 0 {
		for iNdEx := len(m.LevelFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionLevelFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionLevelFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionLevelFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionLevelFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionLevelFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionLevelFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActionLevelFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionLevelFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionLevelFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllActionLevelFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionLevelFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionLevelFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActionLevelFee) > 0 {
		for iNdEx := len(m.ActionLevelFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionLevelFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLevelFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLevelFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LevelFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLevelFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllLevelFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LevelFee) > 0 {
		for _, e := range m.LevelFee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetActionLevelFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionLevelFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActionLevelFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllActionLevelFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActionLevelFee) > 0 {
		for _, e := range m.ActionLevelFee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLevelFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLevelFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLevelFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLevelFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLevelFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLevelFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LevelFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLevelFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLevelFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLevelFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLevelFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLevelFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLevelFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelFee = append(m.LevelFee, LevelFee{})
			if err := m.LevelFee[len(m.LevelFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionLevelFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionLevelFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionLevelFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionLevelFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionLevelFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionLevelFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionLevelFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionLevelFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionLevelFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionLevelFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionLevelFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionLevelFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLevelFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionLevelFee = append(m.ActionLevelFee, ActionLevelFee{})
			if err := m.ActionLevelFee[len(m.ActionLevelFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
