syntax = "proto3";
package shareledger.swap;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "swap/params.proto";
import "swap/request.proto";
import "swap/batch.proto";
import "swap/format.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sharering/shareledger/x/swap/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sharering/shareledger/swap/params";
  }

	// Queries a list of Search items.
	rpc Search(QuerySearchRequest) returns (QuerySearchResponse) {
		option (google.api.http).get = "/sharering/shareledger/swap/search/{status}/{ids}/{srcAddr}/{destAddr}/{srcNetwork}/{destNetwork}";
	}

// Queries a Batch by ids.
	rpc Batch(QueryGetBatchRequest) returns (QueryGetBatchResponse) {
		option (google.api.http).get = "/sharering/shareledger/swap/batch/{ids}";
	}
	

// Queries a list of Fund items.
	rpc Fund(QueryFundRequest) returns (QueryFundResponse) {
		option (google.api.http).get = "/sharering/shareledger/swap/fund";
	}

// Queries a Format by index.
	rpc Format(QueryGetFormatRequest) returns (QueryGetFormatResponse) {
		option (google.api.http).get = "/sharering/shareledger/swap/format/{network}";
	}

	// Queries a list of Format items.
	rpc FormatAll(QueryAllFormatRequest) returns (QueryAllFormatResponse) {
		option (google.api.http).get = "/sharering/shareledger/swap/format";
	}

// Queries a list of SearchBatch items.
	rpc SearchBatch(QuerySearchBatchRequest) returns (QuerySearchBatchResponse) {
		option (google.api.http).get = "/sharering/shareledger/swap/search_batch";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QuerySearchRequest {
  string status = 1;
	repeated uint64 ids = 2;
  string srcAddr = 3;
  string destAddr = 4;
  string srcNetwork = 5;
  string destNetwork = 6;
cosmos.base.query.v1beta1.PageRequest pagination = 7;
}

message QuerySearchResponse {
	repeated Request requests = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBatchRequest {
	repeated uint64 ids = 1;
}

message QueryGetBatchResponse {
	repeated Batch Batch = 1 [(gogoproto.nullable) = false];
}

message QueryFundRequest {
}

message QueryFundResponse {
	repeated	cosmos.base.v1beta1.DecCoin availables = 1;
}

message QueryGetFormatRequest {
	  string network = 1;

}

message QueryGetFormatResponse {
	Format format = 1 [(gogoproto.nullable) = false];
}

message QueryAllFormatRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFormatResponse {
	repeated Format formats = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySearchBatchRequest {
	string status = 1;
cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QuerySearchBatchResponse {
	repeated Batch Batch = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
