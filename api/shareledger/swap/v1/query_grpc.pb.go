// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Search items.
	Swap(ctx context.Context, in *QuerySwapRequest, opts ...grpc.CallOption) (*QuerySwapResponse, error)
	// Queries a list of Fund items.
	Balance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error)
	// Queries a Format by index.
	Schema(ctx context.Context, in *QuerySchemaRequest, opts ...grpc.CallOption) (*QuerySchemaResponse, error)
	// Queries a list of Format items.
	Schemas(ctx context.Context, in *QuerySchemasRequest, opts ...grpc.CallOption) (*QuerySchemasResponse, error)
	// Queries a list of SearchBatch items.
	Batches(ctx context.Context, in *QueryBatchesRequest, opts ...grpc.CallOption) (*QueryBatchesResponse, error)
	// Queries a list of PastTxEvent items.
	PastTxEvent(ctx context.Context, in *QueryPastTxEventRequest, opts ...grpc.CallOption) (*QueryPastTxEventResponse, error)
	// Queries a list of PastTxEvents by txHash items.
	PastTxEventsByTxHash(ctx context.Context, in *QueryPastTxEventsByTxHashRequest, opts ...grpc.CallOption) (*QueryPastTxEventsByTxHashResponse, error)
	// Queries all PastTxEvents
	PastTxEvents(ctx context.Context, in *QueryPastTxEventsRequest, opts ...grpc.CallOption) (*QueryPastTxEventsResponse, error)
	// Queries a list of NextRequestId items.
	NextRequestId(ctx context.Context, in *QueryNextRequestIdRequest, opts ...grpc.CallOption) (*QueryNextRequestIdResponse, error)
	// Queries a list of NextBatchId items.
	NextBatchId(ctx context.Context, in *QueryNextBatchIdRequest, opts ...grpc.CallOption) (*QueryNextBatchIdResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Swap(ctx context.Context, in *QuerySwapRequest, opts ...grpc.CallOption) (*QuerySwapResponse, error) {
	out := new(QuerySwapResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Balance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error) {
	out := new(QueryBalanceResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Schema(ctx context.Context, in *QuerySchemaRequest, opts ...grpc.CallOption) (*QuerySchemaResponse, error) {
	out := new(QuerySchemaResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/Schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Schemas(ctx context.Context, in *QuerySchemasRequest, opts ...grpc.CallOption) (*QuerySchemasResponse, error) {
	out := new(QuerySchemasResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/Schemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Batches(ctx context.Context, in *QueryBatchesRequest, opts ...grpc.CallOption) (*QueryBatchesResponse, error) {
	out := new(QueryBatchesResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/Batches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PastTxEvent(ctx context.Context, in *QueryPastTxEventRequest, opts ...grpc.CallOption) (*QueryPastTxEventResponse, error) {
	out := new(QueryPastTxEventResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/PastTxEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PastTxEventsByTxHash(ctx context.Context, in *QueryPastTxEventsByTxHashRequest, opts ...grpc.CallOption) (*QueryPastTxEventsByTxHashResponse, error) {
	out := new(QueryPastTxEventsByTxHashResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/PastTxEventsByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PastTxEvents(ctx context.Context, in *QueryPastTxEventsRequest, opts ...grpc.CallOption) (*QueryPastTxEventsResponse, error) {
	out := new(QueryPastTxEventsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/PastTxEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextRequestId(ctx context.Context, in *QueryNextRequestIdRequest, opts ...grpc.CallOption) (*QueryNextRequestIdResponse, error) {
	out := new(QueryNextRequestIdResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/NextRequestId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextBatchId(ctx context.Context, in *QueryNextBatchIdRequest, opts ...grpc.CallOption) (*QueryNextBatchIdResponse, error) {
	out := new(QueryNextBatchIdResponse)
	err := c.cc.Invoke(ctx, "/shareledger.swap.Query/NextBatchId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Search items.
	Swap(context.Context, *QuerySwapRequest) (*QuerySwapResponse, error)
	// Queries a list of Fund items.
	Balance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error)
	// Queries a Format by index.
	Schema(context.Context, *QuerySchemaRequest) (*QuerySchemaResponse, error)
	// Queries a list of Format items.
	Schemas(context.Context, *QuerySchemasRequest) (*QuerySchemasResponse, error)
	// Queries a list of SearchBatch items.
	Batches(context.Context, *QueryBatchesRequest) (*QueryBatchesResponse, error)
	// Queries a list of PastTxEvent items.
	PastTxEvent(context.Context, *QueryPastTxEventRequest) (*QueryPastTxEventResponse, error)
	// Queries a list of PastTxEvents by txHash items.
	PastTxEventsByTxHash(context.Context, *QueryPastTxEventsByTxHashRequest) (*QueryPastTxEventsByTxHashResponse, error)
	// Queries all PastTxEvents
	PastTxEvents(context.Context, *QueryPastTxEventsRequest) (*QueryPastTxEventsResponse, error)
	// Queries a list of NextRequestId items.
	NextRequestId(context.Context, *QueryNextRequestIdRequest) (*QueryNextRequestIdResponse, error)
	// Queries a list of NextBatchId items.
	NextBatchId(context.Context, *QueryNextBatchIdRequest) (*QueryNextBatchIdResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Swap(context.Context, *QuerySwapRequest) (*QuerySwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (UnimplementedQueryServer) Balance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedQueryServer) Schema(context.Context, *QuerySchemaRequest) (*QuerySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schema not implemented")
}
func (UnimplementedQueryServer) Schemas(context.Context, *QuerySchemasRequest) (*QuerySchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schemas not implemented")
}
func (UnimplementedQueryServer) Batches(context.Context, *QueryBatchesRequest) (*QueryBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batches not implemented")
}
func (UnimplementedQueryServer) PastTxEvent(context.Context, *QueryPastTxEventRequest) (*QueryPastTxEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastTxEvent not implemented")
}
func (UnimplementedQueryServer) PastTxEventsByTxHash(context.Context, *QueryPastTxEventsByTxHashRequest) (*QueryPastTxEventsByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastTxEventsByTxHash not implemented")
}
func (UnimplementedQueryServer) PastTxEvents(context.Context, *QueryPastTxEventsRequest) (*QueryPastTxEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastTxEvents not implemented")
}
func (UnimplementedQueryServer) NextRequestId(context.Context, *QueryNextRequestIdRequest) (*QueryNextRequestIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextRequestId not implemented")
}
func (UnimplementedQueryServer) NextBatchId(context.Context, *QueryNextBatchIdRequest) (*QueryNextBatchIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextBatchId not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Swap(ctx, req.(*QuerySwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balance(ctx, req.(*QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Schema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Schema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/Schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Schema(ctx, req.(*QuerySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Schemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Schemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/Schemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Schemas(ctx, req.(*QuerySchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Batches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Batches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/Batches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Batches(ctx, req.(*QueryBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PastTxEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPastTxEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PastTxEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/PastTxEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PastTxEvent(ctx, req.(*QueryPastTxEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PastTxEventsByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPastTxEventsByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PastTxEventsByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/PastTxEventsByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PastTxEventsByTxHash(ctx, req.(*QueryPastTxEventsByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PastTxEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPastTxEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PastTxEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/PastTxEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PastTxEvents(ctx, req.(*QueryPastTxEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextRequestId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextRequestIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextRequestId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/NextRequestId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextRequestId(ctx, req.(*QueryNextRequestIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextBatchId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextBatchIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextBatchId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.swap.Query/NextBatchId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextBatchId(ctx, req.(*QueryNextBatchIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.swap.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Query_Swap_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Query_Balance_Handler,
		},
		{
			MethodName: "Schema",
			Handler:    _Query_Schema_Handler,
		},
		{
			MethodName: "Schemas",
			Handler:    _Query_Schemas_Handler,
		},
		{
			MethodName: "Batches",
			Handler:    _Query_Batches_Handler,
		},
		{
			MethodName: "PastTxEvent",
			Handler:    _Query_PastTxEvent_Handler,
		},
		{
			MethodName: "PastTxEventsByTxHash",
			Handler:    _Query_PastTxEventsByTxHash_Handler,
		},
		{
			MethodName: "PastTxEvents",
			Handler:    _Query_PastTxEvents_Handler,
		},
		{
			MethodName: "NextRequestId",
			Handler:    _Query_NextRequestId_Handler,
		},
		{
			MethodName: "NextBatchId",
			Handler:    _Query_NextBatchId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shareledger/swap/v1/query.proto",
}
