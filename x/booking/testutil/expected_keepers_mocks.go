// Code generated by MockGen. DO NOT EDIT.
// Source: x/booking/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/sharering/shareledger/x/asset/types"
)

// MockAssetKeeper is a mock of AssetKeeper interface.
type MockAssetKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAssetKeeperMockRecorder
}

// MockAssetKeeperMockRecorder is the mock recorder for MockAssetKeeper.
type MockAssetKeeperMockRecorder struct {
	mock *MockAssetKeeper
}

// NewMockAssetKeeper creates a new mock instance.
func NewMockAssetKeeper(ctrl *gomock.Controller) *MockAssetKeeper {
	mock := &MockAssetKeeper{ctrl: ctrl}
	mock.recorder = &MockAssetKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetKeeper) EXPECT() *MockAssetKeeperMockRecorder {
	return m.recorder
}

// GetAsset mocks base method.
func (m *MockAssetKeeper) GetAsset(ctx types.Context, uuid string) (types0.Asset, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", ctx, uuid)
	ret0, _ := ret[0].(types0.Asset)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockAssetKeeperMockRecorder) GetAsset(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockAssetKeeper)(nil).GetAsset), ctx, uuid)
}

// SetAssetStatus mocks base method.
func (m *MockAssetKeeper) SetAssetStatus(ctx types.Context, uuid string, status bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAssetStatus", ctx, uuid, status)
}

// SetAssetStatus indicates an expected call of SetAssetStatus.
func (mr *MockAssetKeeperMockRecorder) SetAssetStatus(ctx, uuid, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAssetStatus", reflect.TypeOf((*MockAssetKeeper)(nil).SetAssetStatus), ctx, uuid, status)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockBankKeeper) SendCoinsFromAccountToModule(ctx types.Context, senderAddr types.AccAddress, recipientModule string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromAccountToModule(ctx, senderAddr, recipientModule, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromAccountToModule), ctx, senderAddr, recipientModule, amt)
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(ctx types.Context, senderModule string, recipientAddr types.AccAddress, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToAccount(ctx, senderModule, recipientAddr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToAccount), ctx, senderModule, recipientAddr, amt)
}
