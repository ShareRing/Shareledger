// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: electoral/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetAccStateRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryGetAccStateRequest) Reset()         { *m = QueryGetAccStateRequest{} }
func (m *QueryGetAccStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccStateRequest) ProtoMessage()    {}
func (*QueryGetAccStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{0}
}
func (m *QueryGetAccStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccStateRequest.Merge(m, src)
}
func (m *QueryGetAccStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccStateRequest proto.InternalMessageInfo

func (m *QueryGetAccStateRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryGetAccStateResponse struct {
	AccState AccState `protobuf:"bytes,1,opt,name=accState,proto3" json:"accState"`
}

func (m *QueryGetAccStateResponse) Reset()         { *m = QueryGetAccStateResponse{} }
func (m *QueryGetAccStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccStateResponse) ProtoMessage()    {}
func (*QueryGetAccStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{1}
}
func (m *QueryGetAccStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccStateResponse.Merge(m, src)
}
func (m *QueryGetAccStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccStateResponse proto.InternalMessageInfo

func (m *QueryGetAccStateResponse) GetAccState() AccState {
	if m != nil {
		return m.AccState
	}
	return AccState{}
}

type QueryAllAccStateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccStateRequest) Reset()         { *m = QueryAllAccStateRequest{} }
func (m *QueryAllAccStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccStateRequest) ProtoMessage()    {}
func (*QueryAllAccStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{2}
}
func (m *QueryAllAccStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccStateRequest.Merge(m, src)
}
func (m *QueryAllAccStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccStateRequest proto.InternalMessageInfo

func (m *QueryAllAccStateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccStateResponse struct {
	AccState   []AccState          `protobuf:"bytes,1,rep,name=accState,proto3" json:"accState"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccStateResponse) Reset()         { *m = QueryAllAccStateResponse{} }
func (m *QueryAllAccStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccStateResponse) ProtoMessage()    {}
func (*QueryAllAccStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{3}
}
func (m *QueryAllAccStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccStateResponse.Merge(m, src)
}
func (m *QueryAllAccStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccStateResponse proto.InternalMessageInfo

func (m *QueryAllAccStateResponse) GetAccState() []AccState {
	if m != nil {
		return m.AccState
	}
	return nil
}

func (m *QueryAllAccStateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVoterRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetVoterRequest) Reset()         { *m = QueryGetVoterRequest{} }
func (m *QueryGetVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoterRequest) ProtoMessage()    {}
func (*QueryGetVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{4}
}
func (m *QueryGetVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoterRequest.Merge(m, src)
}
func (m *QueryGetVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoterRequest proto.InternalMessageInfo

func (m *QueryGetVoterRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetVoterResponse struct {
	Voter AccState `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter"`
}

func (m *QueryGetVoterResponse) Reset()         { *m = QueryGetVoterResponse{} }
func (m *QueryGetVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoterResponse) ProtoMessage()    {}
func (*QueryGetVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{5}
}
func (m *QueryGetVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoterResponse.Merge(m, src)
}
func (m *QueryGetVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoterResponse proto.InternalMessageInfo

func (m *QueryGetVoterResponse) GetVoter() AccState {
	if m != nil {
		return m.Voter
	}
	return AccState{}
}

type QueryGetLoaderRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetLoaderRequest) Reset()         { *m = QueryGetLoaderRequest{} }
func (m *QueryGetLoaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLoaderRequest) ProtoMessage()    {}
func (*QueryGetLoaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{6}
}
func (m *QueryGetLoaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLoaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLoaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLoaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLoaderRequest.Merge(m, src)
}
func (m *QueryGetLoaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLoaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLoaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLoaderRequest proto.InternalMessageInfo

func (m *QueryGetLoaderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetLoaderResponse struct {
	AccState *AccState `protobuf:"bytes,1,opt,name=accState,proto3" json:"accState,omitempty"`
}

func (m *QueryGetLoaderResponse) Reset()         { *m = QueryGetLoaderResponse{} }
func (m *QueryGetLoaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLoaderResponse) ProtoMessage()    {}
func (*QueryGetLoaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{7}
}
func (m *QueryGetLoaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLoaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLoaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLoaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLoaderResponse.Merge(m, src)
}
func (m *QueryGetLoaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLoaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLoaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLoaderResponse proto.InternalMessageInfo

func (m *QueryGetLoaderResponse) GetAccState() *AccState {
	if m != nil {
		return m.AccState
	}
	return nil
}

type QueryIdSignerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIdSignerRequest) Reset()         { *m = QueryIdSignerRequest{} }
func (m *QueryIdSignerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIdSignerRequest) ProtoMessage()    {}
func (*QueryIdSignerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{8}
}
func (m *QueryIdSignerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdSignerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdSignerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdSignerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdSignerRequest.Merge(m, src)
}
func (m *QueryIdSignerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdSignerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdSignerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdSignerRequest proto.InternalMessageInfo

func (m *QueryIdSignerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIdSignerResponse struct {
	AccState *AccState `protobuf:"bytes,1,opt,name=accState,proto3" json:"accState,omitempty"`
}

func (m *QueryIdSignerResponse) Reset()         { *m = QueryIdSignerResponse{} }
func (m *QueryIdSignerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIdSignerResponse) ProtoMessage()    {}
func (*QueryIdSignerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{9}
}
func (m *QueryIdSignerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdSignerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdSignerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdSignerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdSignerResponse.Merge(m, src)
}
func (m *QueryIdSignerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdSignerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdSignerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdSignerResponse proto.InternalMessageInfo

func (m *QueryIdSignerResponse) GetAccState() *AccState {
	if m != nil {
		return m.AccState
	}
	return nil
}

type QueryIdSignersRequest struct {
}

func (m *QueryIdSignersRequest) Reset()         { *m = QueryIdSignersRequest{} }
func (m *QueryIdSignersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIdSignersRequest) ProtoMessage()    {}
func (*QueryIdSignersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{10}
}
func (m *QueryIdSignersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdSignersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdSignersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdSignersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdSignersRequest.Merge(m, src)
}
func (m *QueryIdSignersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdSignersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdSignersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdSignersRequest proto.InternalMessageInfo

type QueryIdSignersResponse struct {
	AccStates []*AccState `protobuf:"bytes,1,rep,name=accStates,proto3" json:"accStates,omitempty"`
}

func (m *QueryIdSignersResponse) Reset()         { *m = QueryIdSignersResponse{} }
func (m *QueryIdSignersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIdSignersResponse) ProtoMessage()    {}
func (*QueryIdSignersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{11}
}
func (m *QueryIdSignersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdSignersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdSignersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdSignersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdSignersResponse.Merge(m, src)
}
func (m *QueryIdSignersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdSignersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdSignersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdSignersResponse proto.InternalMessageInfo

func (m *QueryIdSignersResponse) GetAccStates() []*AccState {
	if m != nil {
		return m.AccStates
	}
	return nil
}

type QueryAccountOperatorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountOperatorRequest) Reset()         { *m = QueryAccountOperatorRequest{} }
func (m *QueryAccountOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountOperatorRequest) ProtoMessage()    {}
func (*QueryAccountOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{12}
}
func (m *QueryAccountOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountOperatorRequest.Merge(m, src)
}
func (m *QueryAccountOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountOperatorRequest proto.InternalMessageInfo

func (m *QueryAccountOperatorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAccountOperatorResponse struct {
	AccState *AccState `protobuf:"bytes,1,opt,name=accState,proto3" json:"accState,omitempty"`
}

func (m *QueryAccountOperatorResponse) Reset()         { *m = QueryAccountOperatorResponse{} }
func (m *QueryAccountOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountOperatorResponse) ProtoMessage()    {}
func (*QueryAccountOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{13}
}
func (m *QueryAccountOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountOperatorResponse.Merge(m, src)
}
func (m *QueryAccountOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountOperatorResponse proto.InternalMessageInfo

func (m *QueryAccountOperatorResponse) GetAccState() *AccState {
	if m != nil {
		return m.AccState
	}
	return nil
}

type QueryAccountOperatorsRequest struct {
}

func (m *QueryAccountOperatorsRequest) Reset()         { *m = QueryAccountOperatorsRequest{} }
func (m *QueryAccountOperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountOperatorsRequest) ProtoMessage()    {}
func (*QueryAccountOperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{14}
}
func (m *QueryAccountOperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountOperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountOperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountOperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountOperatorsRequest.Merge(m, src)
}
func (m *QueryAccountOperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountOperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountOperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountOperatorsRequest proto.InternalMessageInfo

type QueryAccountOperatorsResponse struct {
	AccStates []*AccState `protobuf:"bytes,1,rep,name=accStates,proto3" json:"accStates,omitempty"`
}

func (m *QueryAccountOperatorsResponse) Reset()         { *m = QueryAccountOperatorsResponse{} }
func (m *QueryAccountOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountOperatorsResponse) ProtoMessage()    {}
func (*QueryAccountOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{15}
}
func (m *QueryAccountOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountOperatorsResponse.Merge(m, src)
}
func (m *QueryAccountOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountOperatorsResponse proto.InternalMessageInfo

func (m *QueryAccountOperatorsResponse) GetAccStates() []*AccState {
	if m != nil {
		return m.AccStates
	}
	return nil
}

type QueryDocumentIssuerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDocumentIssuerRequest) Reset()         { *m = QueryDocumentIssuerRequest{} }
func (m *QueryDocumentIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentIssuerRequest) ProtoMessage()    {}
func (*QueryDocumentIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{16}
}
func (m *QueryDocumentIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentIssuerRequest.Merge(m, src)
}
func (m *QueryDocumentIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentIssuerRequest proto.InternalMessageInfo

func (m *QueryDocumentIssuerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryDocumentIssuerResponse struct {
	AccState *AccState `protobuf:"bytes,1,opt,name=accState,proto3" json:"accState,omitempty"`
}

func (m *QueryDocumentIssuerResponse) Reset()         { *m = QueryDocumentIssuerResponse{} }
func (m *QueryDocumentIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentIssuerResponse) ProtoMessage()    {}
func (*QueryDocumentIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{17}
}
func (m *QueryDocumentIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentIssuerResponse.Merge(m, src)
}
func (m *QueryDocumentIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentIssuerResponse proto.InternalMessageInfo

func (m *QueryDocumentIssuerResponse) GetAccState() *AccState {
	if m != nil {
		return m.AccState
	}
	return nil
}

type QueryDocumentIssuersRequest struct {
}

func (m *QueryDocumentIssuersRequest) Reset()         { *m = QueryDocumentIssuersRequest{} }
func (m *QueryDocumentIssuersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentIssuersRequest) ProtoMessage()    {}
func (*QueryDocumentIssuersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{18}
}
func (m *QueryDocumentIssuersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentIssuersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentIssuersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentIssuersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentIssuersRequest.Merge(m, src)
}
func (m *QueryDocumentIssuersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentIssuersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentIssuersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentIssuersRequest proto.InternalMessageInfo

type QueryDocumentIssuersResponse struct {
	AccStates []*AccState `protobuf:"bytes,1,rep,name=accStates,proto3" json:"accStates,omitempty"`
}

func (m *QueryDocumentIssuersResponse) Reset()         { *m = QueryDocumentIssuersResponse{} }
func (m *QueryDocumentIssuersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDocumentIssuersResponse) ProtoMessage()    {}
func (*QueryDocumentIssuersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c721b48ee5d4ec, []int{19}
}
func (m *QueryDocumentIssuersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDocumentIssuersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDocumentIssuersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDocumentIssuersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDocumentIssuersResponse.Merge(m, src)
}
func (m *QueryDocumentIssuersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDocumentIssuersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDocumentIssuersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDocumentIssuersResponse proto.InternalMessageInfo

func (m *QueryDocumentIssuersResponse) GetAccStates() []*AccState {
	if m != nil {
		return m.AccStates
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetAccStateRequest)(nil), "shareledger.electoral.QueryGetAccStateRequest")
	proto.RegisterType((*QueryGetAccStateResponse)(nil), "shareledger.electoral.QueryGetAccStateResponse")
	proto.RegisterType((*QueryAllAccStateRequest)(nil), "shareledger.electoral.QueryAllAccStateRequest")
	proto.RegisterType((*QueryAllAccStateResponse)(nil), "shareledger.electoral.QueryAllAccStateResponse")
	proto.RegisterType((*QueryGetVoterRequest)(nil), "shareledger.electoral.QueryGetVoterRequest")
	proto.RegisterType((*QueryGetVoterResponse)(nil), "shareledger.electoral.QueryGetVoterResponse")
	proto.RegisterType((*QueryGetLoaderRequest)(nil), "shareledger.electoral.QueryGetLoaderRequest")
	proto.RegisterType((*QueryGetLoaderResponse)(nil), "shareledger.electoral.QueryGetLoaderResponse")
	proto.RegisterType((*QueryIdSignerRequest)(nil), "shareledger.electoral.QueryIdSignerRequest")
	proto.RegisterType((*QueryIdSignerResponse)(nil), "shareledger.electoral.QueryIdSignerResponse")
	proto.RegisterType((*QueryIdSignersRequest)(nil), "shareledger.electoral.QueryIdSignersRequest")
	proto.RegisterType((*QueryIdSignersResponse)(nil), "shareledger.electoral.QueryIdSignersResponse")
	proto.RegisterType((*QueryAccountOperatorRequest)(nil), "shareledger.electoral.QueryAccountOperatorRequest")
	proto.RegisterType((*QueryAccountOperatorResponse)(nil), "shareledger.electoral.QueryAccountOperatorResponse")
	proto.RegisterType((*QueryAccountOperatorsRequest)(nil), "shareledger.electoral.QueryAccountOperatorsRequest")
	proto.RegisterType((*QueryAccountOperatorsResponse)(nil), "shareledger.electoral.QueryAccountOperatorsResponse")
	proto.RegisterType((*QueryDocumentIssuerRequest)(nil), "shareledger.electoral.QueryDocumentIssuerRequest")
	proto.RegisterType((*QueryDocumentIssuerResponse)(nil), "shareledger.electoral.QueryDocumentIssuerResponse")
	proto.RegisterType((*QueryDocumentIssuersRequest)(nil), "shareledger.electoral.QueryDocumentIssuersRequest")
	proto.RegisterType((*QueryDocumentIssuersResponse)(nil), "shareledger.electoral.QueryDocumentIssuersResponse")
}

func init() { proto.RegisterFile("electoral/query.proto", fileDescriptor_e9c721b48ee5d4ec) }

var fileDescriptor_e9c721b48ee5d4ec = []byte{
	// 821 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4f, 0x4f, 0xd4, 0x40,
	0x18, 0xc6, 0xb7, 0x20, 0x0a, 0x83, 0x51, 0x32, 0x01, 0xc1, 0x0a, 0x05, 0x9b, 0xc8, 0xa2, 0x48,
	0xeb, 0x2e, 0x46, 0x0f, 0xc6, 0xc3, 0x12, 0x23, 0x21, 0x21, 0x51, 0x17, 0xff, 0x24, 0x18, 0x34,
	0xb3, 0xdd, 0x49, 0x69, 0x28, 0x9d, 0xa5, 0x33, 0x25, 0x6e, 0x8c, 0x17, 0x3f, 0x80, 0x31, 0x7a,
	0x30, 0xf1, 0x03, 0x70, 0xf0, 0xe0, 0x47, 0xf0, 0xcc, 0x91, 0xc4, 0x8b, 0x27, 0x63, 0x58, 0x3f,
	0x88, 0x69, 0x3b, 0xed, 0x6e, 0xbb, 0xdd, 0x6d, 0x6b, 0xf6, 0xd6, 0xed, 0xcc, 0xf3, 0xbe, 0xbf,
	0x79, 0xfa, 0xe6, 0x99, 0x2c, 0x98, 0xc2, 0x26, 0xd6, 0x18, 0xb1, 0x91, 0xa9, 0x1e, 0x38, 0xd8,
	0x6e, 0x2a, 0x0d, 0x9b, 0x30, 0x02, 0xa7, 0xe8, 0x2e, 0xb2, 0xb1, 0x89, 0xeb, 0x3a, 0xb6, 0x95,
	0x70, 0x8b, 0x38, 0xab, 0x13, 0xa2, 0x9b, 0x58, 0x45, 0x0d, 0x43, 0x45, 0x96, 0x45, 0x18, 0x62,
	0x06, 0xb1, 0xa8, 0x2f, 0x12, 0x6f, 0x68, 0x84, 0xee, 0x13, 0xaa, 0xd6, 0x10, 0xc5, 0x7e, 0x35,
	0xf5, 0xb0, 0x54, 0xc3, 0x0c, 0x95, 0xd4, 0x06, 0xd2, 0x0d, 0xcb, 0xdb, 0xcc, 0xf7, 0x5e, 0x6e,
	0xf7, 0x45, 0x9a, 0xf6, 0x9a, 0x32, 0xc4, 0x70, 0xc2, 0x92, 0xc3, 0x76, 0x89, 0x6d, 0xb0, 0x66,
	0xf7, 0x12, 0xb3, 0x31, 0xa2, 0x8e, 0x8d, 0x6d, 0xbe, 0x34, 0xa9, 0x13, 0x9d, 0x78, 0x8f, 0xaa,
	0xfb, 0xe4, 0xbf, 0x95, 0x97, 0xc1, 0xf4, 0x13, 0x17, 0x64, 0x1d, 0xb3, 0x8a, 0xa6, 0x6d, 0xb9,
	0x5d, 0xaa, 0xf8, 0xc0, 0xc1, 0x94, 0xc1, 0x09, 0x30, 0xbc, 0x87, 0x9b, 0x33, 0xc2, 0x82, 0xb0,
	0x34, 0x56, 0x75, 0x1f, 0xe5, 0x1d, 0x30, 0xd3, 0xbd, 0x99, 0x36, 0x88, 0x45, 0x31, 0xac, 0x80,
	0x51, 0xc4, 0xdf, 0x79, 0x92, 0xf1, 0xf2, 0xbc, 0x92, 0xe8, 0x91, 0x12, 0x48, 0xd7, 0xce, 0x1c,
	0xff, 0x9e, 0x2f, 0x54, 0x43, 0x99, 0x8c, 0x38, 0x4b, 0xc5, 0x34, 0xe3, 0x2c, 0x0f, 0x01, 0x68,
	0x3b, 0xc4, 0xeb, 0x2f, 0x2a, 0xbe, 0x9d, 0x8a, 0x6b, 0xa7, 0xe2, 0x7f, 0x1c, 0x6e, 0xa7, 0xf2,
	0x18, 0xe9, 0x81, 0xb6, 0xda, 0xa1, 0x94, 0x8f, 0x04, 0x7e, 0x84, 0x48, 0x8f, 0xc4, 0x23, 0x0c,
	0xff, 0xc7, 0x11, 0xe0, 0x7a, 0x84, 0x73, 0xc8, 0xe3, 0x2c, 0xa6, 0x72, 0xfa, 0xfd, 0x23, 0xa0,
	0xb7, 0xc0, 0x64, 0x60, 0xf5, 0x73, 0xc2, 0xb0, 0x1d, 0x18, 0x31, 0x03, 0xce, 0xa1, 0x7a, 0xdd,
	0xc6, 0x94, 0xf2, 0x0f, 0x13, 0xfc, 0x94, 0x9f, 0x82, 0xa9, 0x98, 0x82, 0x1f, 0xeb, 0x1e, 0x18,
	0x39, 0x74, 0x5f, 0xe4, 0xfb, 0x2c, 0xbe, 0x46, 0x2e, 0xb5, 0xab, 0x6e, 0x12, 0x54, 0xcf, 0x02,
	0xf2, 0x0c, 0x5c, 0x8a, 0x4b, 0x42, 0x92, 0xbc, 0x33, 0xd2, 0x31, 0x1d, 0x81, 0x23, 0x1b, 0xf5,
	0x2d, 0x43, 0xb7, 0xf2, 0x38, 0xd2, 0x56, 0x0c, 0x82, 0x63, 0x3a, 0x56, 0x95, 0x72, 0x10, 0xf9,
	0x05, 0x3f, 0x77, 0xc7, 0x02, 0xef, 0x77, 0x1f, 0x8c, 0x05, 0x72, 0x9a, 0x71, 0xb2, 0xaa, 0x6d,
	0x85, 0x7c, 0x17, 0x5c, 0xf1, 0x67, 0x56, 0xd3, 0x88, 0x63, 0xb1, 0x47, 0x0d, 0x6c, 0x23, 0x46,
	0x32, 0x18, 0xf0, 0x12, 0xcc, 0x26, 0x0b, 0x07, 0xe1, 0x83, 0x94, 0x5c, 0x3c, 0xb4, 0xe3, 0x15,
	0x98, 0xeb, 0xb1, 0x3e, 0x18, 0x57, 0xee, 0x00, 0xd1, 0xab, 0xff, 0x80, 0x68, 0xce, 0x3e, 0xb6,
	0xd8, 0x06, 0xa5, 0x4e, 0x96, 0xa9, 0xd8, 0xe6, 0x6e, 0xc6, 0x75, 0x83, 0xf0, 0x64, 0x2e, 0xb1,
	0x76, 0x68, 0xc9, 0x0e, 0xb7, 0xac, 0x6b, 0x79, 0x20, 0x8e, 0x94, 0x7f, 0x9c, 0x07, 0x23, 0x5e,
	0x7d, 0xf8, 0x55, 0x00, 0xa3, 0xc1, 0x0e, 0xa8, 0xf4, 0x28, 0xd1, 0x23, 0xf7, 0x45, 0x35, 0xf3,
	0x7e, 0x1f, 0x5b, 0x5e, 0x79, 0xff, 0xf3, 0xef, 0xe7, 0xa1, 0x22, 0xbc, 0xa6, 0x76, 0x08, 0xd5,
	0xc8, 0xfd, 0xe5, 0x09, 0xd4, 0xb7, 0x7b, 0xb8, 0xf9, 0x0e, 0x7e, 0x11, 0xc0, 0x78, 0x50, 0xa3,
	0x62, 0x9a, 0xfd, 0xf9, 0xba, 0xef, 0x82, 0xfe, 0x7c, 0x09, 0xb9, 0x2e, 0x17, 0x3d, 0xbe, 0xab,
	0x70, 0x3e, 0x85, 0x0f, 0x7e, 0x10, 0xc0, 0x68, 0x10, 0x9f, 0x70, 0x39, 0xc5, 0x86, 0xce, 0x58,
	0x16, 0x6f, 0x66, 0xdb, 0x9c, 0x11, 0x48, 0x0f, 0x18, 0x3e, 0x09, 0x60, 0x2c, 0x8c, 0x51, 0x98,
	0xd6, 0x24, 0x12, 0xd0, 0xe2, 0x4a, 0xc6, 0xdd, 0x9c, 0x69, 0xc9, 0x63, 0x92, 0xe1, 0x42, 0x6f,
	0x26, 0x8e, 0xe1, 0xba, 0x14, 0x64, 0x5c, 0x7f, 0x97, 0x62, 0x51, 0xdd, 0xdf, 0xa5, 0x78, 0x4a,
	0xa7, 0xba, 0x64, 0x04, 0x0c, 0xae, 0x4b, 0x61, 0xe8, 0xc2, 0x4c, 0x4d, 0x68, 0x26, 0x97, 0xba,
	0x92, 0x3c, 0xd5, 0x25, 0x23, 0xc4, 0xf8, 0x26, 0x80, 0x8b, 0xb1, 0xe8, 0x83, 0xe5, 0xbe, 0x93,
	0x9b, 0x98, 0xee, 0xe2, 0x6a, 0x2e, 0x0d, 0xc7, 0x54, 0x3c, 0xcc, 0x25, 0xb8, 0xd8, 0x7b, 0xe2,
	0x23, 0x60, 0xdf, 0x05, 0x30, 0x11, 0xcf, 0x69, 0x98, 0xa7, 0x73, 0xe8, 0xe7, 0xed, 0x7c, 0x22,
	0xce, 0xab, 0x7a, 0xbc, 0xd7, 0x61, 0x31, 0x1b, 0x2f, 0x85, 0x47, 0x02, 0xb8, 0x10, 0x4d, 0x51,
	0x58, 0xea, 0xd7, 0x39, 0xf1, 0x92, 0x10, 0xcb, 0x79, 0x24, 0x19, 0xc3, 0xae, 0x1e, 0xa5, 0x72,
	0xc7, 0x20, 0x16, 0xf7, 0x30, 0x47, 0x5b, 0x9a, 0x69, 0x0c, 0x7a, 0xdc, 0x27, 0xa9, 0x63, 0x10,
	0x65, 0xa5, 0x6b, 0x9b, 0xc7, 0xa7, 0x92, 0x70, 0x72, 0x2a, 0x09, 0x7f, 0x4e, 0x25, 0xe1, 0x63,
	0x4b, 0x2a, 0x9c, 0xb4, 0xa4, 0xc2, 0xaf, 0x96, 0x54, 0xd8, 0x2e, 0xeb, 0x06, 0xdb, 0x75, 0x6a,
	0x8a, 0x46, 0xf6, 0xfd, 0x5a, 0xb6, 0x61, 0xe9, 0x91, 0xaa, 0x6f, 0x3a, 0xea, 0xb2, 0x66, 0x03,
	0xd3, 0xda, 0x59, 0xef, 0x1f, 0xc6, 0xea, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x45, 0x3c,
	0xb0, 0x42, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a accState by index.
	AccState(ctx context.Context, in *QueryGetAccStateRequest, opts ...grpc.CallOption) (*QueryGetAccStateResponse, error)
	// Queries a list of accState items.
	AccStateAll(ctx context.Context, in *QueryAllAccStateRequest, opts ...grpc.CallOption) (*QueryAllAccStateResponse, error)
	// Queries a list of getVoter items.
	GetVoter(ctx context.Context, in *QueryGetVoterRequest, opts ...grpc.CallOption) (*QueryGetVoterResponse, error)
	// Queries a list of getLoader items.
	GetLoader(ctx context.Context, in *QueryGetLoaderRequest, opts ...grpc.CallOption) (*QueryGetLoaderResponse, error)
	// Queries a list of idSigner items.
	IdSigner(ctx context.Context, in *QueryIdSignerRequest, opts ...grpc.CallOption) (*QueryIdSignerResponse, error)
	// Queries a list of idSigners items.
	IdSigners(ctx context.Context, in *QueryIdSignersRequest, opts ...grpc.CallOption) (*QueryIdSignersResponse, error)
	// Queries a list of accountOperator items.
	AccountOperator(ctx context.Context, in *QueryAccountOperatorRequest, opts ...grpc.CallOption) (*QueryAccountOperatorResponse, error)
	// Queries a list of accountOperators items.
	AccountOperators(ctx context.Context, in *QueryAccountOperatorsRequest, opts ...grpc.CallOption) (*QueryAccountOperatorsResponse, error)
	// Queries a list of documentIssuer items.
	DocumentIssuer(ctx context.Context, in *QueryDocumentIssuerRequest, opts ...grpc.CallOption) (*QueryDocumentIssuerResponse, error)
	// Queries a list of documentIssuers items.
	DocumentIssuers(ctx context.Context, in *QueryDocumentIssuersRequest, opts ...grpc.CallOption) (*QueryDocumentIssuersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AccState(ctx context.Context, in *QueryGetAccStateRequest, opts ...grpc.CallOption) (*QueryGetAccStateResponse, error) {
	out := new(QueryGetAccStateResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccStateAll(ctx context.Context, in *QueryAllAccStateRequest, opts ...grpc.CallOption) (*QueryAllAccStateResponse, error) {
	out := new(QueryAllAccStateResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccStateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVoter(ctx context.Context, in *QueryGetVoterRequest, opts ...grpc.CallOption) (*QueryGetVoterResponse, error) {
	out := new(QueryGetVoterResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/GetVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLoader(ctx context.Context, in *QueryGetLoaderRequest, opts ...grpc.CallOption) (*QueryGetLoaderResponse, error) {
	out := new(QueryGetLoaderResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/GetLoader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdSigner(ctx context.Context, in *QueryIdSignerRequest, opts ...grpc.CallOption) (*QueryIdSignerResponse, error) {
	out := new(QueryIdSignerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/IdSigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdSigners(ctx context.Context, in *QueryIdSignersRequest, opts ...grpc.CallOption) (*QueryIdSignersResponse, error) {
	out := new(QueryIdSignersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/IdSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountOperator(ctx context.Context, in *QueryAccountOperatorRequest, opts ...grpc.CallOption) (*QueryAccountOperatorResponse, error) {
	out := new(QueryAccountOperatorResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccountOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountOperators(ctx context.Context, in *QueryAccountOperatorsRequest, opts ...grpc.CallOption) (*QueryAccountOperatorsResponse, error) {
	out := new(QueryAccountOperatorsResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/AccountOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentIssuer(ctx context.Context, in *QueryDocumentIssuerRequest, opts ...grpc.CallOption) (*QueryDocumentIssuerResponse, error) {
	out := new(QueryDocumentIssuerResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/DocumentIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentIssuers(ctx context.Context, in *QueryDocumentIssuersRequest, opts ...grpc.CallOption) (*QueryDocumentIssuersResponse, error) {
	out := new(QueryDocumentIssuersResponse)
	err := c.cc.Invoke(ctx, "/shareledger.electoral.Query/DocumentIssuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a accState by index.
	AccState(context.Context, *QueryGetAccStateRequest) (*QueryGetAccStateResponse, error)
	// Queries a list of accState items.
	AccStateAll(context.Context, *QueryAllAccStateRequest) (*QueryAllAccStateResponse, error)
	// Queries a list of getVoter items.
	GetVoter(context.Context, *QueryGetVoterRequest) (*QueryGetVoterResponse, error)
	// Queries a list of getLoader items.
	GetLoader(context.Context, *QueryGetLoaderRequest) (*QueryGetLoaderResponse, error)
	// Queries a list of idSigner items.
	IdSigner(context.Context, *QueryIdSignerRequest) (*QueryIdSignerResponse, error)
	// Queries a list of idSigners items.
	IdSigners(context.Context, *QueryIdSignersRequest) (*QueryIdSignersResponse, error)
	// Queries a list of accountOperator items.
	AccountOperator(context.Context, *QueryAccountOperatorRequest) (*QueryAccountOperatorResponse, error)
	// Queries a list of accountOperators items.
	AccountOperators(context.Context, *QueryAccountOperatorsRequest) (*QueryAccountOperatorsResponse, error)
	// Queries a list of documentIssuer items.
	DocumentIssuer(context.Context, *QueryDocumentIssuerRequest) (*QueryDocumentIssuerResponse, error)
	// Queries a list of documentIssuers items.
	DocumentIssuers(context.Context, *QueryDocumentIssuersRequest) (*QueryDocumentIssuersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AccState(ctx context.Context, req *QueryGetAccStateRequest) (*QueryGetAccStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccState not implemented")
}
func (*UnimplementedQueryServer) AccStateAll(ctx context.Context, req *QueryAllAccStateRequest) (*QueryAllAccStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccStateAll not implemented")
}
func (*UnimplementedQueryServer) GetVoter(ctx context.Context, req *QueryGetVoterRequest) (*QueryGetVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoter not implemented")
}
func (*UnimplementedQueryServer) GetLoader(ctx context.Context, req *QueryGetLoaderRequest) (*QueryGetLoaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoader not implemented")
}
func (*UnimplementedQueryServer) IdSigner(ctx context.Context, req *QueryIdSignerRequest) (*QueryIdSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdSigner not implemented")
}
func (*UnimplementedQueryServer) IdSigners(ctx context.Context, req *QueryIdSignersRequest) (*QueryIdSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdSigners not implemented")
}
func (*UnimplementedQueryServer) AccountOperator(ctx context.Context, req *QueryAccountOperatorRequest) (*QueryAccountOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountOperator not implemented")
}
func (*UnimplementedQueryServer) AccountOperators(ctx context.Context, req *QueryAccountOperatorsRequest) (*QueryAccountOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountOperators not implemented")
}
func (*UnimplementedQueryServer) DocumentIssuer(ctx context.Context, req *QueryDocumentIssuerRequest) (*QueryDocumentIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentIssuer not implemented")
}
func (*UnimplementedQueryServer) DocumentIssuers(ctx context.Context, req *QueryDocumentIssuersRequest) (*QueryDocumentIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentIssuers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AccState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccState(ctx, req.(*QueryGetAccStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccStateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccStateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccStateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccStateAll(ctx, req.(*QueryAllAccStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/GetVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVoter(ctx, req.(*QueryGetVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLoader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLoaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLoader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/GetLoader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLoader(ctx, req.(*QueryGetLoaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdSignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/IdSigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdSigner(ctx, req.(*QueryIdSignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdSignersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/IdSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdSigners(ctx, req.(*QueryIdSignersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccountOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountOperator(ctx, req.(*QueryAccountOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/AccountOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountOperators(ctx, req.(*QueryAccountOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/DocumentIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentIssuer(ctx, req.(*QueryDocumentIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentIssuersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shareledger.electoral.Query/DocumentIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentIssuers(ctx, req.(*QueryDocumentIssuersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shareledger.electoral.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccState",
			Handler:    _Query_AccState_Handler,
		},
		{
			MethodName: "AccStateAll",
			Handler:    _Query_AccStateAll_Handler,
		},
		{
			MethodName: "GetVoter",
			Handler:    _Query_GetVoter_Handler,
		},
		{
			MethodName: "GetLoader",
			Handler:    _Query_GetLoader_Handler,
		},
		{
			MethodName: "IdSigner",
			Handler:    _Query_IdSigner_Handler,
		},
		{
			MethodName: "IdSigners",
			Handler:    _Query_IdSigners_Handler,
		},
		{
			MethodName: "AccountOperator",
			Handler:    _Query_AccountOperator_Handler,
		},
		{
			MethodName: "AccountOperators",
			Handler:    _Query_AccountOperators_Handler,
		},
		{
			MethodName: "DocumentIssuer",
			Handler:    _Query_DocumentIssuer_Handler,
		},
		{
			MethodName: "DocumentIssuers",
			Handler:    _Query_DocumentIssuers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "electoral/query.proto",
}

func (m *QueryGetAccStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAccStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccState) > 0 {
		for iNdEx := len(m.AccState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLoaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLoaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLoaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLoaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLoaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLoaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccState != nil {
		{
			size, err := m.AccState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdSignerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdSignerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdSignerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdSignerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdSignerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdSignerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccState != nil {
		{
			size, err := m.AccState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdSignersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdSignersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdSignersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIdSignersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdSignersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdSignersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccStates) > 0 {
		for iNdEx := len(m.AccStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccState != nil {
		{
			size, err := m.AccState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountOperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountOperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountOperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAccountOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccStates) > 0 {
		for iNdEx := len(m.AccStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccState != nil {
		{
			size, err := m.AccState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDocumentIssuersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentIssuersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentIssuersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDocumentIssuersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDocumentIssuersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDocumentIssuersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccStates) > 0 {
		for iNdEx := len(m.AccStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAccStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAccStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccState) > 0 {
		for _, e := range m.AccState {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Voter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLoaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLoaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccState != nil {
		l = m.AccState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdSignerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdSignerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccState != nil {
		l = m.AccState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdSignersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIdSignersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccStates) > 0 {
		for _, e := range m.AccStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccState != nil {
		l = m.AccState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountOperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAccountOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccStates) > 0 {
		for _, e := range m.AccStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDocumentIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDocumentIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccState != nil {
		l = m.AccState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDocumentIssuersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDocumentIssuersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccStates) > 0 {
		for _, e := range m.AccStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAccStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccState = append(m.AccState, AccState{})
			if err := m.AccState[len(m.AccState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLoaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLoaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLoaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLoaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLoaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLoaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccState == nil {
				m.AccState = &AccState{}
			}
			if err := m.AccState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdSignerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdSignerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdSignerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdSignerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdSignerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdSignerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccState == nil {
				m.AccState = &AccState{}
			}
			if err := m.AccState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdSignersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdSignersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdSignersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdSignersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdSignersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdSignersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccStates = append(m.AccStates, &AccState{})
			if err := m.AccStates[len(m.AccStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccState == nil {
				m.AccState = &AccState{}
			}
			if err := m.AccState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountOperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountOperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountOperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccStates = append(m.AccStates, &AccState{})
			if err := m.AccStates[len(m.AccStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccState == nil {
				m.AccState = &AccState{}
			}
			if err := m.AccState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentIssuersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentIssuersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentIssuersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDocumentIssuersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDocumentIssuersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDocumentIssuersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccStates = append(m.AccStates, &AccState{})
			if err := m.AccStates[len(m.AccStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
