// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gentlemint/level_fee.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LevelFee struct {
	Level   string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Fee     string `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *LevelFee) Reset()         { *m = LevelFee{} }
func (m *LevelFee) String() string { return proto.CompactTextString(m) }
func (*LevelFee) ProtoMessage()    {}
func (*LevelFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_b729e670765c5582, []int{0}
}
func (m *LevelFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelFee.Merge(m, src)
}
func (m *LevelFee) XXX_Size() int {
	return m.Size()
}
func (m *LevelFee) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelFee.DiscardUnknown(m)
}

var xxx_messageInfo_LevelFee proto.InternalMessageInfo

func (m *LevelFee) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LevelFee) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *LevelFee) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type LevelFeeDetail struct {
	Level        string      `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Creator      string      `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	OriginalFee  string      `protobuf:"bytes,2,opt,name=originalFee,proto3" json:"originalFee,omitempty"`
	ConvertedFee *types.Coin `protobuf:"bytes,4,opt,name=convertedFee,proto3" json:"convertedFee,omitempty"`
}

func (m *LevelFeeDetail) Reset()         { *m = LevelFeeDetail{} }
func (m *LevelFeeDetail) String() string { return proto.CompactTextString(m) }
func (*LevelFeeDetail) ProtoMessage()    {}
func (*LevelFeeDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b729e670765c5582, []int{1}
}
func (m *LevelFeeDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelFeeDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelFeeDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelFeeDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelFeeDetail.Merge(m, src)
}
func (m *LevelFeeDetail) XXX_Size() int {
	return m.Size()
}
func (m *LevelFeeDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelFeeDetail.DiscardUnknown(m)
}

var xxx_messageInfo_LevelFeeDetail proto.InternalMessageInfo

func (m *LevelFeeDetail) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LevelFeeDetail) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *LevelFeeDetail) GetOriginalFee() string {
	if m != nil {
		return m.OriginalFee
	}
	return ""
}

func (m *LevelFeeDetail) GetConvertedFee() *types.Coin {
	if m != nil {
		return m.ConvertedFee
	}
	return nil
}

func init() {
	proto.RegisterType((*LevelFee)(nil), "shareledger.gentlemint.LevelFee")
	proto.RegisterType((*LevelFeeDetail)(nil), "shareledger.gentlemint.LevelFeeDetail")
}

func init() { proto.RegisterFile("gentlemint/level_fee.proto", fileDescriptor_b729e670765c5582) }

var fileDescriptor_b729e670765c5582 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x18, 0xc4, 0x63, 0xca, 0x5f, 0x17, 0x21, 0x64, 0x21, 0x14, 0x3a, 0x58, 0x51, 0xa7, 0x4e, 0xb6,
	0x4a, 0x67, 0x16, 0x40, 0x4c, 0x65, 0xe9, 0xc8, 0x82, 0x9c, 0xf4, 0x6b, 0x6a, 0x29, 0xf1, 0x57,
	0x39, 0x26, 0x82, 0xb7, 0xe0, 0x15, 0x78, 0x1b, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x11, 0x14, 0xa7,
	0x15, 0xe9, 0xd0, 0xcd, 0x77, 0x3a, 0xff, 0xac, 0x3b, 0xd3, 0x41, 0x0a, 0xc6, 0x65, 0x90, 0x6b,
	0xe3, 0x64, 0x06, 0x25, 0x64, 0xaf, 0x0b, 0x00, 0xb1, 0xb2, 0xe8, 0x90, 0x5d, 0x17, 0x4b, 0x65,
	0x21, 0x83, 0x79, 0x0a, 0x56, 0xfc, 0xe7, 0x06, 0x3c, 0xc1, 0x22, 0xc7, 0x42, 0xc6, 0xaa, 0x00,
	0x59, 0x8e, 0x63, 0x70, 0x6a, 0x2c, 0x13, 0xd4, 0xa6, 0xbd, 0x37, 0x9c, 0xd2, 0xd3, 0x69, 0x83,
	0x7a, 0x02, 0x60, 0x57, 0xf4, 0xc8, 0x63, 0x43, 0x12, 0x91, 0xd1, 0xd9, 0xac, 0x15, 0xec, 0x92,
	0xf6, 0x16, 0x00, 0xe1, 0x81, 0xf7, 0x9a, 0x23, 0x0b, 0xe9, 0x49, 0x62, 0x41, 0x39, 0xb4, 0x61,
	0xcf, 0xbb, 0x5b, 0x39, 0xfc, 0x22, 0xf4, 0x62, 0x8b, 0x7b, 0x04, 0xa7, 0x74, 0xb6, 0x07, 0xba,
	0x17, 0xc1, 0x22, 0xda, 0x47, 0xab, 0x53, 0x6d, 0x54, 0x03, 0xd9, 0x3c, 0xdb, 0xb5, 0xd8, 0x1d,
	0x3d, 0x4f, 0xd0, 0x94, 0x60, 0x1d, 0xcc, 0x9b, 0xc8, 0x61, 0x44, 0x46, 0xfd, 0xdb, 0x1b, 0xd1,
	0x36, 0x15, 0x4d, 0x53, 0xb1, 0x69, 0x2a, 0x1e, 0x50, 0x9b, 0xd9, 0x4e, 0xfc, 0xfe, 0xf9, 0xbb,
	0xe2, 0x64, 0x5d, 0x71, 0xf2, 0x5b, 0x71, 0xf2, 0x59, 0xf3, 0x60, 0x5d, 0xf3, 0xe0, 0xa7, 0xe6,
	0xc1, 0xcb, 0x24, 0xd5, 0x6e, 0xf9, 0x16, 0x8b, 0x04, 0x73, 0xe9, 0xe7, 0xb4, 0xda, 0xa4, 0xb2,
	0x33, 0xac, 0x7c, 0x97, 0x9d, 0x2f, 0x70, 0x1f, 0x2b, 0x28, 0xe2, 0x63, 0xbf, 0xe3, 0xe4, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x98, 0x63, 0x49, 0xe1, 0x9d, 0x01, 0x00, 0x00,
}

func (m *LevelFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLevelFee(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintLevelFee(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintLevelFee(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LevelFeeDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelFeeDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelFeeDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConvertedFee != nil {
		{
			size, err := m.ConvertedFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLevelFee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLevelFee(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalFee) > 0 {
		i -= len(m.OriginalFee)
		copy(dAtA[i:], m.OriginalFee)
		i = encodeVarintLevelFee(dAtA, i, uint64(len(m.OriginalFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintLevelFee(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLevelFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovLevelFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LevelFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovLevelFee(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovLevelFee(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLevelFee(uint64(l))
	}
	return n
}

func (m *LevelFeeDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovLevelFee(uint64(l))
	}
	l = len(m.OriginalFee)
	if l > 0 {
		n += 1 + l + sovLevelFee(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLevelFee(uint64(l))
	}
	if m.ConvertedFee != nil {
		l = m.ConvertedFee.Size()
		n += 1 + l + sovLevelFee(uint64(l))
	}
	return n
}

func sovLevelFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLevelFee(x uint64) (n int) {
	return sovLevelFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LevelFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevelFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLevelFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLevelFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelFeeDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLevelFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelFeeDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelFeeDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertedFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLevelFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLevelFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConvertedFee == nil {
				m.ConvertedFee = &types.Coin{}
			}
			if err := m.ConvertedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLevelFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLevelFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLevelFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLevelFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLevelFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLevelFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLevelFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLevelFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLevelFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLevelFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLevelFee = fmt.Errorf("proto: unexpected end of group")
)
