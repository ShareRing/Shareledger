syntax = "proto3";
package ShareRing.shareledger.electoral;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "electoral/acc_state.proto";
import "electoral/authority.proto";
import "electoral/treasurer.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/ShareRing/Shareledger/x/electoral/types";

// Query defines the gRPC querier service.
service Query {
    // Queries a accState by index.
	rpc AccState(QueryGetAccStateRequest) returns (QueryGetAccStateResponse) {
		option (google.api.http).get = "/ShareRing/shareledger/electoral/accState/{key}";
	}

	// Queries a list of accState items.
	rpc AccStateAll(QueryAllAccStateRequest) returns (QueryAllAccStateResponse) {
		option (google.api.http).get = "/ShareRing/shareledger/electoral/accState";
	}

// Queries a authority by index.
	rpc Authority(QueryGetAuthorityRequest) returns (QueryGetAuthorityResponse) {
		option (google.api.http).get = "/ShareRing/shareledger/electoral/authority";
	}
// Queries a treasurer by index.
	rpc Treasurer(QueryGetTreasurerRequest) returns (QueryGetTreasurerResponse) {
		option (google.api.http).get = "/ShareRing/shareledger/electoral/treasurer";
	}
// this line is used by starport scaffolding # 2
}

message QueryGetAccStateRequest {
	  string key = 1;

}

message QueryGetAccStateResponse {
	AccState accState = 1 [(gogoproto.nullable) = false];
}

message QueryAllAccStateRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAccStateResponse {
	repeated AccState accState = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAuthorityRequest {}

message QueryGetAuthorityResponse {
	Authority Authority = 1 [(gogoproto.nullable) = false];
}
message QueryGetTreasurerRequest {}

message QueryGetTreasurerResponse {
	Treasurer Treasurer = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
